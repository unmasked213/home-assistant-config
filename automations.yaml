- id: '1685656147198'
  alias: Structure - C room - Door
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.ds00_position
    to: 'on'
    from:
    id: C door opened
  - platform: state
    entity_id:
    - binary_sensor.ds00_position
    to: 'off'
    from: 'on'
    id: C door closed
  - platform: state
    entity_id:
    - binary_sensor.vs02_vibration
    to: 'on'
    id: C door vibration
  condition: []
  action:
  - alias: 'When C door is: OPENED (or moves whilst open)'
    if:
    - alias: Test if door was opened OR was moved whilst open
      condition: or
      conditions:
      - condition: trigger
        id:
        - C door opened
      - alias: Check if door is moved whilst open
        condition: template
        value_template: '{{ is_state(binary_sensor.ds00_position, ''on'') and trigger.id
          == ''C door vibration'' }}

          '
    then:
    - if:
      - condition: template
        value_template: '{{ is_state(''input_boolean.room_alert_flash_mode'', ''on'')
          or is_state(''input_boolean.room_alert_sound_mode'', ''on'') }}'
        alias: Check for an enabled alert mode for room alerts
      then:
      - alias: Snapshot -  Room alert input_booleans
        service: scene.create
        data:
          scene_id: room_alert_modes_pre_door_open
          snapshot_entities:
          - input_boolean.room_alert_sound_mode
          - input_boolean.room_alert_flash_mode
      - alias: 'Turn room alerts: OFF'
        service: input_boolean.turn_off
        data: {}
        target:
          entity_id:
          - input_boolean.room_alert_flash_mode
          - input_boolean.room_alert_sound_mode
      alias: Snapshot room alert booleans THEN turn off room alerts
  - alias: 'When C door is: CLOSED'
    if:
    - condition: trigger
      id:
      - C door closed
    then:
    - alias: return room alert booleans to their state before door was opened
      service: scene.turn_on
      data: {}
      target:
        entity_id: scene.room_alert_modes_pre_door_open
  - alias: Door moved when C is away
    if:
    - condition: and
      conditions:
      - condition: or
        conditions:
        - condition: trigger
          id:
          - C door opened
        - condition: and
          conditions:
          - condition: trigger
            id:
            - C door vibration
          - condition: state
            entity_id: binary_sensor.ds00_position
            state: 'on'
        alias: Test if door was opened OR was moved whilst open
      - condition: not
        conditions:
        - condition: state
          entity_id: person.cam
          state: home
        alias: Confirm C is not home
    then:
    - service: input_boolean.turn_on
      data: {}
      target:
        entity_id: input_boolean.bedroom_door_unauthorized_open
      alias: Activate dashboard alert
    - service: persistent_notification.create
      data:
        title: Critical alert
        message: C bedroom door was just opened. Sensors show you are not home, therefore
          entry is unauthorised
  mode: single
- id: '1686354095324'
  alias: Device - Scales - Stand-on trigger
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.withings_weight_kg_healthmate_speedupmypc_dralias_com
  action:
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.weight_scales_measured_today
  mode: single
- id: '1691963578394'
  alias: Button - PC Delete keystroke
  description: Button press simulates a keystroke for the delete key on C PC
  trigger:
  - platform: state
    entity_id:
    - event.hue_smart_button_2_button_1
    attribute: event_type
    to: initial_press
  condition: []
  action:
  - service: button.press
    data: {}
    target:
      entity_id: button.c_pc_a_multiplekeys_delete
    alias: PC key - Delete button
    enabled: true
  mode: single
- id: '1696876481088'
  alias: Theme - Rounded - Toggle light/dark
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_select.theme_rounded_toggle_light_and_dark
    to: light
    id: roundedlight
  - platform: state
    entity_id:
    - input_select.theme_rounded_toggle_light_and_dark
    to: dark
    id: roundeddark
  condition: []
  action:
  - alias: Light mode
    if:
    - condition: trigger
      id:
      - roundedlight
    then:
    - service: browser_mod.set_theme
      data:
        theme: Rounded-Alt-2
        dark: light
  - alias: Dark mode
    if:
    - condition: trigger
      id:
      - roundeddark
    then:
    - service: browser_mod.set_theme
      data:
        theme: Rounded-Alt-2
        dark: dark
  mode: single
- id: '1697647087979'
  alias: Scene - Log activated scene
  description: ''
  trigger:
  - platform: event
    event_type: call_service
    event_data:
      domain: scene
      service: turn_on
  condition: []
  action:
  - if:
    - condition: template
      value_template: '{{ ''bedroom'' in trigger.event.data.service_data.entity_id  }}'
    then:
    - service: browser_mod.notification
      data:
        message: 'Scene activated: {{ trigger.event.data.service_data.entity_id }}'
        duration: 5000
      target:
        device_id: 35bda49ba56e9a05cade79ec96783640
    - service: input_text.set_value
      data:
        value: '{{ trigger.event.data.service_data.entity_id }}'
      target:
        entity_id: input_text.most_recent_scene_acvivated
  mode: single
- id: '1697824736132'
  alias: Presence - House door
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.vs00_vibration
    from:
    to: 'on'
    id: Front door moved
    trigger: state
  conditions: []
  actions:
  - alias: Room alert - Purple
    if:
    - condition: and
      conditions:
      - condition: and
        conditions:
        - alias: Triggers
          condition: trigger
          id:
          - Front door moved
          - C08 motion detected
        - alias: Check if an alert method is enabled (either light or sound)
          condition: template
          value_template: '{{ is_state(''input_boolean.room_alert_flash_mode'', ''on'')
            or is_state(''input_boolean.room_alert_sound_mode'', ''on'') }}'
    then:
    - alias: Activate room alert (variable data included)
      data:
        light_entity: light.room_02
        flash_color: purple
        flash_duration: 00:00:01
        sound_file: tech_alert_4s_ver2.wav
        sound_device: media_player.sonos_speaker
      action: script.room_alert
    - target:
        entity_id: media_player.sonos_speaker
      data:
        media_content_id: media-source://media_source/local/sound/tech_alert_4s_ver2.wav
        media_content_type: audio/mp4
      metadata:
        title: config_www_sound_popup.m4a
        thumbnail:
        media_class: music
        children_media_class:
        navigateIds:
        - {}
        - media_content_type: app
          media_content_id: media-source://media_source
        - media_content_type: ''
          media_content_id: media-source://media_source/local/sound
      action: media_player.play_media
  mode: single
- id: '1698694409909'
  alias: Time - Hourly triggers
  description: ''
  trigger:
  - platform: time
    at: 01:00:00
    id: '0100'
  - platform: time
    at: 02:00:00
    id: '0200'
  - platform: time
    at: 03:00:00
    id: '0300'
  - platform: time
    at: 04:00:00
    id: '0400'
  - platform: time
    at: 05:00:00
    id: '0500'
  - platform: time
    at: 06:00:00
    id: '0600'
  - platform: time
    at: 07:00:00
    id: '0700'
  - platform: time
    at: 08:00:00
    id: 0800
  - platform: time
    at: 09:00:00
    id: 0900
  - platform: time
    at: '10:00:00'
    id: '1000'
  - platform: time
    at: '11:00:00'
    id: '1100'
  - platform: time
    at: '12:00:00'
    id: '1200'
  - platform: time
    at: '13:00:00'
    id: '1300'
  - platform: time
    at: '14:00:00'
    id: '1400'
  - platform: time
    at: '15:00:00'
    id: '1500'
  - platform: time
    at: '16:00:00'
    id: '1600'
  - platform: time
    at: '17:00:00'
    id: '1700'
  - platform: time
    at: '18:00:00'
    id: '1800'
  - platform: time
    at: '19:00:00'
    id: '1900'
  - platform: time
    at: '20:00:00'
    id: '2000'
  - platform: time
    at: '21:00:00'
    id: '2100'
  - platform: time
    at: '22:00:00'
    id: '2200'
  - platform: time
    at: '23:00:00'
    id: '2300'
  - platform: time
    at: 00:00:00
    id: '0000'
  - platform: sun
    event: sunset
    offset: 0
    id: sunset
  - platform: sun
    event: sunrise
    offset: 0
    id: sunrise
  condition: []
  action:
  - if:
    - condition: trigger
      id:
      - '0200'
    then:
    - service: input_boolean.turn_off
      data: {}
      target:
        entity_id: input_boolean.structure_curtains_initial_morning_opening
    alias: Reset helpers - Daily 02:00
  - alias: 'Camera - Sunrise - Deactivate night vision: C09'
    if:
    - condition: template
      value_template: '{{ trigger.id == ''sunrise'' and not is_state(''select.c09_day_night_mode'',
        ''color'') }}'
    then:
    - service: select.select_option
      data:
        option: color
      target:
        entity_id: select.c09_day_night_mode
  - alias: 'Camera - Sunset - Activate night vision: C09'
    if:
    - condition: template
      value_template: '{{ trigger.id == ''sunset'' and not is_state(''select.c09_day_night_mode'',
        ''blackwhite'') }}'
    then:
    - service: select.select_option
      data:
        option: blackwhite
      target:
        entity_id: select.c09_day_night_mode
  mode: single
- id: '1699794846160'
  alias: Presence - Upper stairs
  description: ''
  triggers:
  - entity_id:
    - input_boolean.tester_binary_switch_presence_floor_02
    to:
    id: Floor 02 alert tester
    trigger: state
  - entity_id:
    - binary_sensor.fp2_02_zone01
    from: 'off'
    to: 'on'
    id: Presence on upper staircase  (floor 01 to floor 02)
    trigger: state
  - entity_id:
    - binary_sensor.e_bedroom_door
    from: 'off'
    to: 'on'
    id: Enhy's door opened
    trigger: state
  - entity_id:
    - binary_sensor.vs01_vibration
    to: 'on'
    id: Enhy's door moved
    trigger: state
  - entity_id:
    - binary_sensor.fp2_02_zone02
    from: 'off'
    to: 'on'
    id: Presence on Floor 02 landing
    trigger: state
  - entity_id:
    - binary_sensor.c_bedroom_door
    from: 'off'
    to: 'on'
    id: Cam's door opened
    trigger: state
  - value_template: "\n      {{ is_state('binary_sensor.c08_motion', 'on') and\n         is_state('binary_sensor.fp2_01_all',
      'on') and\n         is_state('person.cam', 'home') }}"
    id: C08 motion detected
    enabled: false
    trigger: template
  - entity_id:
    - binary_sensor.fp2_02_zone03
    from: 'off'
    to: 'on'
    id: Presence on upper staircase  (floor 01 to floor 02)
    trigger: state
  - entity_id:
    - binary_sensor.fp2_02_all
    from: 'off'
    to: 'on'
    id: Presence on upper staircase  (floor 01 to floor 02)
    trigger: state
  conditions: []
  actions:
  - data:
      message: 'Triggered by: {{ (trigger.id if trigger is defined else ''Manually
        triggered'') | default(''Manually triggered'') }}'
      title: Motion detected
      data:
        push:
          badge: 0
        category: custom_category
        thread-id: example_tag
        apns_headers:
          apns-collapse-id: example_tag
    action: notify.mobile_app_ipod
  - alias: Room alert - Red
    if:
    - condition: and
      conditions:
      - alias: Check if an alert method is enabled (either light or sound)
        condition: template
        value_template: '{{ is_state(''input_boolean.room_alert_flash_mode'', ''on'')
          or is_state(''input_boolean.room_alert_sound_mode'', ''on'') }}'
      - alias: Triggers
        condition: trigger
        id:
        - Enhy's door opened
        - Enhy's door moved
        - Presence on Floor 02 landing
        - Presence on upper staircase  (floor 01 to floor 02)
        - Cam's door opened
        - Floor 02 alert tester
    then:
    - alias: Activate room alert (variable data included)
      data:
        light_entity: light.room_02
        flash_color: red
        flash_duration: 00:00:01
        sound_file: tech_click_4s_ver4.wav
        sound_device: media_player.sonos_speaker
        tts_message: Room alert has just been triggered.
        notification_text: Room alert has just been triggered!
        notification_title: Warning
      action: script.room_alert
  - alias: Delay until automation can trigger again
    delay:
      hours: 0
      minutes: 1
      seconds: 0
      milliseconds: 0
  mode: single
- id: '1700671679415'
  alias: Zone - Station ECR Cam
  description: ''
  trigger:
  - platform: zone
    entity_id: person.cam
    zone: zone.east_croydon_train_station
    event: enter
  - platform: zone
    entity_id: person.enhy
    zone: zone.work_hotel
    id: e leave work
    event: leave
  - platform: zone
    entity_id: person.enhy
    zone: zone.train_station_purley
    event: enter
    id: E enter PUR
  - platform: zone
    entity_id: person.enhy
    zone: zone.east_croydon_train_station
    event: enter
    id: E enter ECR
  - platform: zone
    entity_id: person.enhy
    zone: zone.train_station_blackfriars
    event: enter
    id: E enter London train station
  - platform: zone
    entity_id: person.enhy
    zone: zone.train_station_london_victoria
    event: enter
    id: E enter London train station
  - platform: zone
    entity_id: person.enhy
    zone: zone.london_bridge_train_station
    event: enter
    id: E enter London train station
  - platform: zone
    entity_id: person.enhy
    zone: zone.train_station_lee
    event: enter
    id: E enter Lee train station
  - platform: zone
    entity_id: person.enhy
    zone: zone.east_croydon_train_station
    event: enter
  condition: []
  action:
  - service: whatsapp.send_message
    data:
      clientId: default
      to: 447308254154@s.whatsapp.net
      body:
        text: '[Auto] I''m at East Croydon station'
    alias: Send WhatsApp message
    enabled: false
  - if:
    - condition: template
      value_template: '{{ now() - state_attr(''automation.zone_station_ecr_cam'',
        ''last_triggered'') > timedelta(minutes=1) }}'
    then:
    - service: light.toggle
      target:
        entity_id: light.bedroom
      data: {}
    enabled: false
  - alias: Room alert - Blue
    if:
    - condition: and
      conditions:
      - alias: Triggers
        condition: trigger
        id:
        - e leave work
        - E enter PUR
        - E enter ECR
        - E enter London train station
        - E enter Lee train station
      - alias: Check if an alert method is enabled (either light or sound)
        condition: template
        value_template: '{{ is_state(''input_boolean.room_alert_flash_mode'', ''on'')
          or is_state(''input_boolean.room_alert_sound_mode'', ''on'') }}'
    then:
    - alias: Activate room alert (variable data included)
      service: script.room_alert
      data:
        light_entity: light.bedroom
        flash_color: blue
        flash_duration: 00:00:01
        sound_file: tech_click_4s_ver4.wav
        sound_device: media_player.sonos_speaker
        tts_message: Room alert has just been triggered.
        notification_text: Room alert has just been triggered!
        notification_title: Warning
    enabled: true
  mode: single
- id: '1700672088627'
  alias: Travel - Train
  description: ''
  trigger:
  - platform: zone
    entity_id: person.cam
    zone: zone.east_croydon_train_station
    event: enter
    id: C arrive ECR
  - platform: zone
    entity_id: person.cam
    zone: zone.east_croydon_train_station
    event: enter
    id: C arrive ECR
  condition: []
  action:
  - if:
    - condition: trigger
      id:
      - C arrive ECR
    then:
    - service: whatsapp.send_message
      data:
        clientId: default
        to: 447308254154@s.whatsapp.net
        body:
          text: '[Auto] I''m at East Croydon station'
      alias: Send WhatsApp message
  mode: single
- id: '1702151983485'
  alias: Health - Toothbrush usage update
  description: ''
  trigger:
  - type: duration
    platform: device
    device_id: 56920ed2fde80dd8e98ebbe5b7116814
    entity_id: 297facc7f9d5dcb8d7806b52074b212c
    domain: sensor
    above: 15
    alias: Toothbrush is used for over 15 seconds
    id: Brush is used
  - platform: time
    at: 03:00:00
    id: Brush daily reset
  - platform: time
    at: '20:00:00'
    id: Evening inclusion
  condition: []
  action:
  - if:
    - condition: trigger
      id:
      - Brush is used
    then:
    - service: input_number.increment
      target:
        entity_id: input_number.health_toothbrush_daily_use_count
      data: {}
      alias: 'Increase helper count by 1 when used '
    alias: Increase helper count when used
  - alias: Reset count every day
    if:
    - condition: trigger
      id:
      - Brush daily reset
    then:
    - service: input_number.set_value
      data:
        value: 0
      target:
        entity_id: input_number.health_toothbrush_daily_use_count
  - alias: Adjust count in evening
    if:
    - condition: trigger
      id:
      - Evening inclusion
    then:
    - service: input_number.decrement
      target:
        entity_id: input_number.health_toothbrush_daily_use_count
      data: {}
  mode: single
- id: '1704304962217'
  alias: Alerts - Frontend light-flash tester
  description: ''
  trigger:
  - platform: state
    entity_id:
    - input_select.room_alert_flash_tester
    to:
    from:
  condition: []
  action:
  - alias: Room alert
    if:
    - alias: Check if an alert method is enabled (either light or sound)
      condition: template
      value_template: '{{ is_state(''input_boolean.room_alert_flash_mode'', ''on'')
        or is_state(''input_boolean.room_alert_sound_mode'', ''on'') }}'
    then:
    - alias: Activate room alert (variable data included)
      service: script.room_alert
      data:
        light_entity: light.bedroom
        flash_color: '{{ trigger.to_state.state | lower }}'
        flash_duration: 00:00:01
        sound_file: tech_click_4s_ver4.wav
        sound_device: media_player.sonos_speaker
        tts_message: Room alert has just been triggered.
        notification_text: Room alert has just been triggered!
        notification_title: Warning
  mode: single
- id: '1704854751879'
  alias: Server - Backup - Automatic backups
  description: This automation makes a full backup of the server every day at 04:00.
    Backups are kept for 1 week before being replaced by a new backup. Notifications
    are issued for successful, failed, amd ongoing backup attempts.
  trigger:
  - platform: time
    at: 04:00:00
    id: create backup
  - platform: event
    event_type: auto_backup.backup_failed
    id: backup failure
  - platform: event
    event_type: auto_backup.backup_successful
    id: backup success
  condition: []
  action:
  - alias: Automatically create full server backups
    if:
    - condition: and
      conditions:
      - condition: time
        weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
        - sat
        - sun
        alias: This is the auto-backup frequency
      - condition: trigger
        id:
        - create backup
        alias: Triggers
    then:
    - data:
        name: full_server_backup_{{ now().strftime('%Y_%m_%d') }}
        keep_days: 7
      action: auto_backup.backup_full
  - alias: Auto-backup failure alert
    if:
    - condition: trigger
      id:
      - backup failure
    then:
    - data:
        title: 'CRITICAL: Auto-backup failure'
        message: 'Name: {{ trigger.event.data.name }}

          Error: {{ trigger.event.data.error }}'
      action: persistent_notification.create
    - metadata: {}
      data:
        message: Automatic backup of server has failed
        title: 'CRITICAL: Auto-backup failure'
      action: notify.mobile_app_phone_c
  - alias: Auto-backup success alert
    if:
    - condition: trigger
      id:
      - backup success
    then:
    - data:
        title: 'INFO: Auto-backup successful'
        message: Automatic backup of server was successful
      action: persistent_notification.create
    - metadata: {}
      data:
        message: Automatic backup of server was successful
        title: 'INFO: Auto-backup successful'
      action: notify.mobile_app_phone_c
- id: '1705505423873'
  alias: Health - C - Launch Oral-B app during toothbrush usage
  description: Launch oral-b app when toothbrush is running
  trigger:
  - platform: state
    entity_id:
    - sensor.toothbrush_c_mode
    to: running
  action:
  - service: notify.mobile_app_phone_c
    data:
      message: command_launch_app
      data:
        package_name: com.pg.oralb.oralbapp
  mode: single
- id: '1708901522853'
  alias: Button - B04 - E room blinds
  description: 'This automation controls the blinds in E room using the B04 button.
    It checks the state of the first blind. If the first blind is closed, it opens
    both  blinds. If the first blind is open, it closes both blinds. If any of the  blinds
    are unavailable, it will create a notification.

    '
  triggers:
  - event_type: hue_event
    event_data:
      id: hue_smart_button_1_button_1
      event: initial_press
    trigger: event
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ is_state(blinds[0], ''open'') or is_state(blinds[0], ''closed'')
          }}'
      sequence:
      - target:
          entity_id: '{{ blinds }}'
        action: 'cover.{{ ''open_cover'' if state_attr(blinds[0], ''current_position'')
          | int < 51 else ''close_cover'' }}

          '
    - conditions:
      - condition: template
        value_template: '{{ is_state(blinds[0], ''opening'') or is_state(blinds[0],
          ''closing'') }}'
      sequence:
      - target:
          entity_id: '{{ blinds }}'
        action: cover.stop_cover
    default:
    - data:
        message: Enhy's window blinds did not respond. Check Matter integration.
        title: Blinds Control Error
      action: persistent_notification.create
  variables:
    blinds:
    - cover.aqara_roller_shade_driver_e1_cover_6
    - cover.aqara_roller_shade_driver_e1_cover_5
  mode: single
- id: '1709518035420'
  alias: 'MPV dial button '
  description: ''
  trigger:
  - device_id: 3aeb11c36639f5a210e6532141e6ad4d
    domain: hue
    platform: device
    type: start
    subtype: clock_wise
    unique_id: 35739a06-a550-4ecc-ad18-bbef124c41b5
    id: rotate clockwise
  - device_id: 3aeb11c36639f5a210e6532141e6ad4d
    domain: hue
    platform: device
    type: start
    subtype: counter_clock_wise
    unique_id: 35739a06-a550-4ecc-ad18-bbef124c41b5
    id: rotate anti-clockwise
  condition: []
  action:
  - if:
    - condition: trigger
      id:
      - rotate anti-clockwise
    then:
    - service: button.press
      metadata: {}
      data: {}
      target:
        entity_id: button.c_pc_a_mpv_next
  - if:
    - condition: trigger
      id:
      - rotate clockwise
    then:
    - service: button.press
      metadata: {}
      data: {}
      target:
        entity_id: button.c_pc_a_mpv_prev
  mode: single
- id: '1709870803991'
  alias: Calendars
  description: 'All calendar event automations '
  trigger:
  - platform: calendar
    event: start
    entity_id: calendar.special_day
    id: Event start - Special Day
    alias: Event start - Special day
  - platform: calendar
    event: start
    entity_id: calendar.both
    id: Event start - Both
    alias: Event start - Both
  - platform: calendar
    event: start
    entity_id: calendar.cam
    id: Event start - Cam
    alias: Event start - Cam
  - platform: calendar
    event: start
    entity_id: calendar.enhy
    id: Event start - Enhy
    alias: Event start -Enhy
  action:
  - if:
    - condition: trigger
      id:
      - Event start - Special Day
      - Event start - Both
      - Event start - Cam
      - Event start - Enhy
    then:
    - service: persistent_notification.create
      data:
        message: 'Calendar event due today: {{ trigger.calendar_event.summary }}'
  mode: parallel
  max: 10
- id: '1709871443112'
  alias: Cameras
  description: ''
  triggers:
  - event: sunset
    offset: +01:00:00
    id: Sunset
    trigger: sun
    alias: 1 hour after the sun sets
  - event: sunrise
    offset: 0
    id: Sunrise
    trigger: sun
  conditions: []
  actions:
  - alias: Sunrise and sunset
    choose:
    - conditions:
      - condition: trigger
        id:
        - Sunrise
      sequence:
      - alias: 'Turn camera night-vision: OFF'
        metadata: {}
        data:
          option: Colour
        target:
          entity_id:
          - select.c09_day_night_mode
          - select.c08_day_night_mode
          - select.c05_day_night_mode
        action: select.select_option
    - conditions:
      - condition: trigger
        id:
        - Sunset
      sequence:
      - alias: 'Turn camera night-vision: ON'
        metadata: {}
        data:
          option: blackwhite
        target:
          entity_id:
          - select.c09_day_night_mode
          - select.c08_day_night_mode
        action: select.select_option
  - if:
    - alias: C08 detects no motion for atleast X
      condition: template
      value_template: '{{ is_state(''binary_sensor.c08_motion'', ''off'') and now()
        - (state_attr(''binary_sensor.c08_motion'', ''last_changed'') | default(as_datetime(0),
        true)) > timedelta(minutes=1) }}'
    then: []
  mode: single
- id: '1710456051619'
  alias: Heater
  description: Control the Govee heater via API commands
  trigger:
  - platform: state
    entity_id: input_select.govee_heater_output
    id: Heater Strength level changed
  - platform: template
    value_template: '{{ states(''sensor.meter_plus_445f'') | float > Temperature_upper_limit
      | float }}'
    id: Room temperature threshold breached
  - platform: zone
    entity_id: person.cam
    zone: zone.home
    event: leave
    id: C leaves home
  condition: []
  action:
  - alias: Heater - Auto off
    choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.id == ''Room temperature threshold breached''
          }}'
      sequence:
      - service: persistent_notification.create
        data:
          title: 'DEVICE: Auto-off'
          message: '{% if states(''input_select.govee_heater_output'') in [''1'',
            ''2''] %} Room temperature threshold exceeded at {{ states(''sensor.meter_plus_445f'')
            }}. Heater automatically deactivated. {% elif states(''input_select.govee_heater_output'')
            == ''3'' %} Room temperature threshold exceeded at {{ states(''sensor.meter_plus_445f'')
            }}. Heater output level changed to 4. {% endif %}

            '
      - choose:
        - conditions:
          - condition: template
            value_template: '{{ states(''input_select.govee_heater_output'') in [''1'',
              ''2''] }}'
          sequence:
          - service: rest_command.rest_govee_appliance
            data:
              device: FD:67:60:74:F4:30:0C:7E
              model: H713B
              cmd_name: turn
              cmd_value: 'off'
            alias: 'Heater: OFF'
        - conditions:
          - condition: template
            value_template: '{{ states(''input_select.govee_heater_output'') == ''3''
              }}'
          sequence:
          - service: input_select.select_option
            data:
              option: '4'
            target:
              entity_id: input_select.govee_heater_output
  - alias: Heater - Auto off when Cam leaves home
    choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.id == ''C leaves home'' }}'
      sequence:
      - sequence:
        - service: rest_command.rest_govee_appliance
          data:
            device: FD:67:60:74:F4:30:0C:7E
            model: H713B
            cmd_name: turn
            cmd_value: 'off'
          alias: 'Heater: OFF'
        - service: switch.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: switch.mpm09_matter
          alias: 'Fan: OFF'
        - alias: Notify mobile - C
          service: notify.mobile_app_phone_c
          metadata: {}
          data:
            data:
              ttl: 600
              priority: default
              media_stream: default
              confirmation: false
              color: '#202334'
              sticky: false
              persistent: false
              notification_icon: mdi:fan
              tag: heater_auto_off
              vibrationPattern: 100, 100, 100, 100, 100
              timeout: 600
              car_ui: true
              visibility: public
            message: You're not home<br> <b>Heater</b> and <b>fan</b> powered down
            title: Device alert
  - sequence:
    - service: rest_command.rest_govee_appliance
      data:
        device: FD:67:60:74:F4:30:0C:7E
        model: H713B
        cmd_name: turn
        cmd_value: 'off'
      alias: 'Heater: OFF'
    - service: switch.turn_off
      metadata: {}
      data: {}
      target:
        entity_id: switch.mpm09_matter
      alias: 'Fan: OFF'
    - alias: Notify mobile - C
      service: notify.mobile_app_phone_c
      metadata: {}
      data:
        data:
          ttl: 600
          priority: default
          media_stream: default
          confirmation: false
          color: '#202334'
          sticky: false
          persistent: false
          notification_icon: mdi:fan
          tag: heater_auto_off
          vibrationPattern: 100, 100, 100, 100, 100
          timeout: 600
          car_ui: true
          visibility: public
        message: You're not home<br> <b>Heater</b> powered down
        title: Device alert
  variables:
    heater_device_id: '{{ device_id | upper or ''FD:67:60:74:F4:30:0C:7E'' }}'
    heater_model: '{{ model | upper or ''H713B'' }}'
    Temperature_upper_limit: '{{ max_temp or ''30'' }}'
  mode: single
- id: '1710573911757'
  alias: Power - Battery monitoring
  description: Battery low notification with auto dismiss
  trigger:
  - platform: event
    event_type: battery_notes_battery_threshold
    event_data:
      battery_low: true
    id: low
    alias: Battery went low
  - platform: event
    event_type: battery_notes_battery_threshold
    event_data:
      battery_low: false
    id: high
    alias: Battery went high
  - platform: time
    at: 09:00:00
    id: dailycheck
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - dailycheck
      sequence:
      - service: battery_notes.check_battery_low
        data: {}
    - conditions:
      - condition: trigger
        id:
        - low
      sequence:
      - service: persistent_notification.create
        data:
          title: 'DEVICE: Low power

            '
          notification_id: '{{ trigger.event.data.device_id }}'
          message: 'Device: {{ trigger.event.data.device_name }}  {{ ''\n'' -}} Power:
            {{ trigger.event.data.battery_level }}% {{ ''\n'' -}} Battery: {{ trigger.event.data.battery_quantity
            }}× {{ trigger.event.data.battery_type }}

            '
    - conditions:
      - condition: trigger
        id:
        - high
      sequence:
      - service: persistent_notification.dismiss
        data:
          notification_id: '{{ trigger.event.data.device_id }}'
  mode: queued
- id: '1711146519885'
  alias: Structure - E room
  description: ''
  trigger:
  - platform: template
    value_template: '{{ states(''sensor.mpm11_power'') | float >= 4 }}'
    id: MPM11 power drain active
  - platform: numeric_state
    entity_id:
    - sensor.mpm11_power
    above: 5
    id: MPM11 power drain active
  - platform: numeric_state
    entity_id:
    - sensor.mpm11_power
    below: 5
    id: MPM11 power drain inactive
  condition: []
  action:
  - if:
    - condition: trigger
      id:
      - MPM11 power drain active
    then:
    - service: light.turn_on
      metadata: {}
      data:
        brightness_pct: 100
      target:
        entity_id: light.elgato_panel_01
  - if:
    - condition: trigger
      id:
      - MPM11 power drain inactive
    then:
    - service: light.turn_off
      target:
        entity_id: light.elgato_panel_01
      data: {}
  mode: single
- id: '1711433425006'
  alias: Sleep detection
  description: ''
  trigger:
  - platform: device
    device_id: 2b776dbf70596260a43bc1cfd9326e80
    domain: alarm_control_panel
    entity_id: a47d48c30ff8a0daf78bcd438ada2bfe
    type: armed_away
    id: Aqara automation trigger
  - platform: state
    entity_id:
    - person.enhy
    from: home
    to: not_home
    id: Reset boolean
  condition: []
  action:
  - alias: When Aqara automation is triggered
    if:
    - condition: trigger
      id:
      - Aqara automation trigger
    then:
    - service: input_boolean.toggle
      target:
        entity_id:
        - input_boolean.fp2_03_sleep_sensor
      data: {}
  - alias: Reset boolean when E leaves home
    if:
    - condition: trigger
      id:
      - Reset boolean
    then:
    - service: input_boolean.turn_off
      target:
        entity_id:
        - input_boolean.fp2_03_sleep_sensor
      data: {}
  mode: single
- id: '1713243059859'
  alias: Alarms
  description: ''
  triggers:
  - at: 05:52:00
    enabled: true
    trigger: time
  - minutes: /1
    enabled: false
    trigger: time_pattern
  conditions:
  - condition: time
    weekday:
    - mon
    - tue
    - wed
    - thu
    - fri
  - condition: template
    value_template: "{% set start_time = state_attr('calendar.united_kingdom_eng',
      'start_time') %} {% if start_time is string %}\n  {% set start_time = strptime(start_time.split('
      ')[0], '%Y-%m-%d') %}\n{% endif %} {{ now().strftime('%Y-%m-%d') != start_time.strftime('%Y-%m-%d')
      }}      "
    alias: If it's not a public holiday
  actions:
  - data:
      message: command_activity
      data:
        intent_action: android.intent.action.SET_ALARM
        intent_extras: "{% set timelist = alarm_time.split(':') %} {% set timehour
          = timelist[0] %} {% set timemin = timelist[1] %}\n  android.intent.extra.alarm.HOUR:{{
          timehour }},android.intent.extra.alarm.MINUTES:{{ timemin }},android.intent.extra.alarm.SKIP_UI:true"
    action: notify.mobile_app_phone_c
    alias: Set phone alarm
  - delay:
      seconds: 2
  - data:
      message: command_dnd
      data:
        command: 'off'
    action: notify.mobile_app_phone_c
    alias: Turn off Do Not Disturb
  - delay:
      seconds: 2
  - data:
      message: command_ringer_mode
      data:
        command: normal
    action: notify.mobile_app_phone_c
    alias: Ensure ringer is on normal mode
  - delay:
      seconds: 2
  - data:
      message: command_activity
      data:
        intent_action: android.media.action.SET_VOLUME
        intent_extras:
          android.media.extra.STREAM_TYPE: 4
          android.media.extra.VOLUME_LEVEL: 15
    action: notify.mobile_app_phone_c
    alias: Set alarm volume to maximum
  - delay:
      seconds: 2
  - data:
      message: command_activity
      data:
        intent_action: android.media.action.SET_VOLUME
        intent_extras:
          android.media.extra.STREAM_TYPE: 2
          android.media.extra.VOLUME_LEVEL: 15
    action: notify.mobile_app_phone_c
    alias: Set ringer volume to maximum
  - delay:
      seconds: 2
  - data:
      message: clear_notification
      data:
        tag: command_activity
    action: notify.mobile_app_phone_c
    alias: Clear command activity notification
  variables:
    alarm_time: 08:59
- id: '1713383354202'
  alias: Greenhouse Plant Watering Reminder
  trigger:
  - platform: template
    value_template: '{{ now().weekday() in [1, 3, 5] and now().hour in [8, 12, 17,
      21] and is_state(''input_boolean.greenhouse_needs_watering'', ''on'') }}

      '
    id: Schedule trigger
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: 'yes'
    id: Yes is pressed
    alias: 'When YES is pressed in the notification '
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: 'no'
    id: No is pressed
    alias: 'When NO is pressed in the notification '
  - platform: time
    at: 07:00:00
    id: Reset
  action:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.id == ''Schedule trigger'' }}'
      sequence:
      - service: notify.mobile_app_phone_c
        metadata: {}
        data:
          data:
            actions:
            - action: 'yes'
              title: 'Yes'
            - action: 'no'
              title: 'No'
          message: Did you water the plants in the greenhouse?
          error_handling:
            when: delayed
            delay: 1200
            max_retries: 3
          priority: urgent
          sound: default
          vibration_pattern:
          - 200
          - 100
          - 200
          led_color: '#00FF00'
          icon: mdi:watering-can
          timeout: 10800
      alias: 'Send scheduled notification reminder '
    - conditions:
      - condition: template
        value_template: '{{ trigger.event.data.action == ''yes'' }}'
      sequence:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.greenhouse_needs_watering
        data: {}
      alias: When someone presses YES on notification
    - conditions:
      - condition: template
        value_template: '{{ trigger.event == ''Reset'' }}'
      sequence:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.greenhouse_needs_watering
        data: {}
      alias: Reset boolean at X time
- id: '1713616286163'
  alias: location types logger
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.location_cam_phone
    attribute: place_type
    id: c phone
  - platform: state
    entity_id:
    - sensor.location_enhy_phone
    attribute: place_type
    id: e phone
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - c phone
      sequence:
      - service: input_text.set_value
        target:
          entity_id: input_text.location_type_logger
        data_template:
          value: '{{ state_attr(''sensor.location_cam_phone'', ''place_type'') }}'
    - conditions:
      - condition: trigger
        id:
        - e phone
      sequence:
      - service: input_text.set_value
        target:
          entity_id: input_text.location_type_logger
        data_template:
          value: '{{ state_attr(''sensor.location_enhy_phone'', ''place_type'') }}'
  mode: single
- id: '1714267052410'
  alias: E desk lights button
  description: ''
  triggers:
  - entity_id: event.hue_smart_button_1_button_1
    attribute: event_type
    to: short_release
    trigger: state
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ is_state(''light.elgato_panel_01'', ''off'') or is_state(''light.elgato_bw10k1a02640'',
          ''off'') }}'
      sequence:
      - data:
          kelvin: 5619
          brightness_pct: 100
        target:
          entity_id:
          - light.elgato_panel_01
          - light.signe_gradient_table_1
          - light.elgato_panel_02
        action: light.turn_on
    - conditions:
      - condition: template
        value_template: '{{ is_state(''light.elgato_panel_01'', ''on'') or is_state(''light.elgato_bw10k1a02640'',
          ''on'') }}'
      sequence:
      - target:
          entity_id:
          - light.elgato_panel_01
          - light.signe_gradient_table_1
          - light.elgato_panel_02
        data: {}
        action: light.turn_off
    default: []
  mode: restart
- id: '1716503808123'
  alias: Startup actions following a server reboot
  description: Initiate various startup actions following a server reboot.
  triggers:
  - event: start
    trigger: homeassistant
  actions:
  - delay: 00:05:00
    alias: 'Startup stability buffer: 5 minutes'
  - data:
      addon: f4fdf59d_whatsapp_addon
    action: hassio.addon_start
    alias: 'Start addon: WhatsApp addon'
  - action: ha_text_ai.set_system_prompt
    data:
      instance: sensor.ha_text_ai_translator_c
      prompt: Translate English to Spanish and Spanish to English naturally, preserving
        tone, humor, and intent. Avoid softening expressions. Ignore reactions like
        “lol,” “hahaha,” or emojis. Output only the translated text, with no explanations.
    alias: 'Set AI system prompt: WhatsApp message translator for C'
  - alias: 'Set AI system prompt: WhatsApp message autoreply for C'
    action: ha_text_ai.set_system_prompt
    data:
      instance: sensor.ha_text_ai_c_chat_autoreply
      prompt: 'You generate casual WhatsApp responses that exactly match this specific
        texting style. Give one response that feels like a quick, natural reply.


        Personal style patterns:

        - Use all lowercase

        - Often split thoughts into multiple separate messages

        - Use "its" without apostrophe

        - Minimal punctuation except occasional commas in longer messages

        - Say "lol" casually at the end of messages sometimes

        - Use "v" instead of "very"

        - Quick, direct starts without greetings

        - Often say "sorry" casually

        - Use common shortcuts like "cant", "youre", "theres"

        - Only use occasional basic emojis

        - Write in short, casual fragments

        - Sometimes end messages with exclamation marks for emphasis

        - Use "u" instead of "you" sometimes


        Technical style:

        - Talk about tech stuff casually and knowledgeably

        - Use proper technical terms without explaining them

        - Reference AI/automation naturally


        Speech patterns:

        - Start responses directly without formality

        - Break longer thoughts into multiple messages

        - Keep it brief and to the point

        - Be direct but friendly

        - Never offer help or ask if more info is needed

        - Just give one natural response like you would in real chat'
  mode: single
- id: '1716730824609'
  alias: Call Alexa Script Every 20 Minutes During Daytime
  description: ''
  trigger:
  - platform: time_pattern
    minutes: /11
  condition:
  - condition: sun
    before: sunset
    after: sunrise
  - condition: state
    entity_id: person.cam
    state: home
  action:
  - service: script.alexa_display_ha_dashboard_show_8
    data: {}
- id: '1717369553910'
  alias: C Bedroom lights auto-off
  triggers:
  - entity_id: binary_sensor.fp2_01_all
    to: 'off'
    for: 00:15:00
    trigger: state
  - entity_id: person.cam
    to: not_home
    trigger: state
  - entity_id: sensor.c_pc_a_lastactive
    for: 01:00:00
    trigger: state
  actions:
  - action: scene.turn_on
    target:
      entity_id: scene.bedroom_energise
  - delay: 00:00:05
  - target:
      entity_id: light.bedroom
    action: light.turn_off
  mode: restart
- id: '1717665115348'
  alias: Set default theme on server boot
  description: ''
  trigger:
  - platform: homeassistant
    event: start
  action:
  - data:
      name: Rounded-Alt-2
    action: frontend.set_theme
  mode: single
- id: '1717992172639'
  alias: Home - C enter/exit
  description: ''
  trigger:
  - platform: state
    entity_id:
    - person.cam
    for:
      hours: 0
      minutes: 1
      seconds: 0
    from: home
    to: not_home
    id: Home exit - C
  - platform: state
    entity_id: person.cam
    from: not_home
    to: home
    id: Home enter - C
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: Home exit - C
      sequence:
      - service: rest_command.rest_govee_appliance
        data:
          device: FD:67:60:74:F4:30:0C:7E
          model: H713B
          cmd_name: turn
          cmd_value: 'off'
        alias: 'Heater: OFF'
      - service: switch.turn_off
        target:
          entity_id:
          - switch.ex02_06
          - switch.ex02_04
          - switch.ex02_03
          - switch.ex01_02
        alias: 'PC screens: OFF'
        data: {}
      - service: switch.turn_off
        target:
          entity_id: switch.p09
        alias: 'Fan: OFF'
        data: {}
      - service: fan.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: fan.air_purifier
        alias: 'Air purifier: OFF'
      - service: cover.open_cover
        target:
          entity_id: cover.c_bedroom_window
        alias: Close window
        data: {}
      - service: light.turn_off
        target:
          entity_id: light.bedroom
        data: {}
      - service: switch.turn_off
        target:
          entity_id: switch.c03_c_room_privacy_mode
        alias: 'C03: OFF'
        data: {}
      - alias: Notify mobile - C
        service: notify.mobile_app_phone_c
        data:
          title: Left home
          message: Bedroom powered down
          data:
            ttl: 300
            priority: default
            media_stream: default
            color: '#202334'
            notification_icon: mdi:walk
            tag: bedroom_auto_off
            vibrationPattern: 100, 100, 100, 100, 100
            timeout: 60
            car_ui: true
            visibility: public
      - service: notify.mobile_app_phone_c
        data:
          message: command_ringer_mode
          data:
            command: vibrate
        alias: 'Change phone''s ringer mode to:  VIBRATE'
      alias: 'C: EXIT HOME'
    - conditions:
      - condition: trigger
        id: Home enter - C
      sequence:
      - service: switch.turn_on
        target:
          entity_id: switch.c03_c_room_privacy_mode
        alias: 'C03: ON'
        data: {}
      - service: switch.turn_on
        target:
          entity_id:
          - switch.ex02_06
          - switch.ex02_04
          - switch.ex02_03
          - switch.ex01_02
        alias: 'PC screens: ON'
        data: {}
      - alias: 'Air purifier: ON'
        service: fan.set_percentage
        target:
          entity_id:
          - fan.air_purifier
        data:
          percentage: 33
      - service: switch.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: switch.mpm12_matter
        alias: 'Air freshener: ON'
      - choose:
        - conditions:
          - condition: time
            after: 09:00:00
            before: '22:00:00'
          sequence:
          - service: notify.mobile_app_phone_c
            data:
              message: command_ringer_mode
              data:
                command: normal
            alias: 'Change phone''s ringer mode to:  LOUD'
        default:
        - service: notify.mobile_app_phone_c
          data:
            message: command_ringer_mode
            data:
              command: vibrate
          alias: 'Change phone''s ringer mode to:  VIBRATE'
      alias: 'C: ENTER HOME'
  mode: single
- id: '1718756485471'
  alias: Air freshener auto-off
  description: Ensure the switch is turned off if it's been on for over 5 minutes
  triggers:
  - minutes: /10
    trigger: time_pattern
  conditions:
  - condition: state
    entity_id: switch.smart_switch_2309268440298751081948e1e9dcad50_outlet
    state: 'on'
    for:
      minutes: 5
  actions:
  - data: {}
    action: switch.turn_off
    target:
      entity_id: switch.smart_switch_2309268440298751081948e1e9dcad50_outlet
  mode: single
- id: '1722266778030'
  alias: E door - Remind to close
  description: ''
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.e_bedroom_door
    to: 'on'
    for:
      hours: 0
      minutes: 3
      seconds: 0
    id: e door open first notice
  - platform: state
    entity_id:
    - binary_sensor.e_bedroom_door
    to: 'on'
    for:
      hours: 0
      minutes: 10
      seconds: 0
    id: e door open second notice
  condition: []
  action:
  - if:
    - condition: state
      entity_id: person.enhy
      state: home
    - condition: state
      entity_id: person.cam
      state: home
    - condition: or
      conditions:
      - condition: state
        entity_id: binary_sensor.fp2_06_all
        state: 'on'
      - condition: state
        entity_id: binary_sensor.fp2_03_all
        state: ''
      - condition: state
        entity_id: binary_sensor.withings_e_in_bed
        state: 'on'
      alias: If E room is occupied
    - condition: state
      entity_id: binary_sensor.fp2_01_all
      state: 'on'
      alias: if C room is occupied
    - condition: time
      after: 09:00:00
      before: '18:00:00'
    - condition: time
      weekday:
      - mon
      - tue
      - wed
      - thu
      - fri
    then:
    - choose:
      - conditions:
        - condition: trigger
          id:
          - e door open first notice
        sequence: []
      - conditions:
        - condition: trigger
          id:
          - e door open second notice
        sequence: []
  mode: single
- id: '1723395461919'
  alias: Ask AI what it can see
  description: ''
  trigger:
  - platform: state
    entity_id: input_text.llm_user_question
  condition:
  - condition: template
    value_template: '{{ trigger.to_state.state | length >= 3 }}'
  action:
  - data:
      provider: OpenAI
      detail: high
      temperature: 0.4
      message: '{{ states(''input_text.llm_user_question'') }}. Answer directly and
        clearly, do not offer unsolicited assistance and do not say it is a camera
        feed or image you are reviewing. If you cannot answer the question, simply
        say you are not sure.'
      image_entity:
      - camera.front_door
      max_tokens: 100
    response_variable: response
    action: llmvision.image_analyzer
  - data:
      value: '{{ response.response_text }}'
    target:
      entity_id: input_text.llmvision_response
    action: input_text.set_value
- id: '1723468809103'
  alias: AI Image Generator
  description: ''
  triggers:
  - entity_id: input_text.ai_generate_image_user_prompt
    trigger: state
  conditions:
  - condition: template
    value_template: '{{ trigger.to_state.state | length >= 3 }}'
  actions:
  - data:
      config_entry: 3fa0788bd491bc1449052bab56dba8ff
      quality: '{{ states(''input_select.ai_generate_image_quality'') }}'
      style: '{{ states(''input_select.ai_generate_image_style'') }}'
      prompt: '{{ states(''input_text.ai_generate_image_user_prompt'') }}'
      size: 1024x1024
    response_variable: generated_image
    action: openai_conversation.generate_image
  - delay: 00:00:05
  - action: input_text.set_value
    data:
      value: '{{ generated_image.url[0:255] }}'
    target:
      entity_id: input_text.ai_generated_image_url_part_1
  - action: input_text.set_value
    data:
      value: '{{ generated_image.url[255:] }}'
    target:
      entity_id: input_text.ai_generated_image_url_part_2
  - data:
      message: 'Here''s {{ states(''input_text.ai_generate_image_user_prompt'') }}:
        {{ generated_image.url }}'
      title: Here you go!
    action: persistent_notification.create
    enabled: true
  mode: single
- id: '1724982754965'
  alias: Update e_Sleep Summary with AI Response
  description: ''
  trigger:
  - platform: state
    entity_id:
    - sensor.withings_e_light_sleep
  condition:
  - condition: template
    value_template: '{{ (as_timestamp(now()) - as_timestamp(states.sensor.withings_e_light_sleep.last_changed))
      > 1800 }}

      '
    enabled: false
  action:
  - target:
      entity_id:
      - sensor.e_sleep_summary_response
    action: homeassistant.update_entity
    data: {}
  - target:
      entity_id:
      - sensor.ai_text_response
    action: homeassistant.update_entity
    data: {}
- id: '1725825021532'
  alias: Lights - Floor 02
  description: Automatically manages the lights on Floor 02 based on motion and door
    activity from multiple sensors. Lights adjust their brightness dynamically based
    on the time of night and outside light levels. The automation checks every 2 minutes
    and turns the lights off when no presence is detected on stairs or landing for
    a specified period.
  triggers:
  - entity_id:
    - binary_sensor.vs01_vibration
    - binary_sensor.ds06_position
    - binary_sensor.vs02_c_door_vibration_2
    - binary_sensor.ds00_position
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_6
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_7
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_11
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_10
    to: 'on'
    id: lights_on
    trigger: state
  - minutes: /2
    id: cycle
    trigger: time_pattern
  conditions:
  - alias: Ignore motion after switch press
    condition: template
    value_template: "{{ (now() - states.event.upper_stairs_light_switch_top_switch_button_1.last_changed).total_seconds()
      > 60 and\n   (now() - states.event.upper_stairs_light_switch_bottom_switch_button_1.last_changed).total_seconds()
      > 60 }}\n"
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id: lights_on
      - alias: If it's dark outside
        condition: template
        value_template: '{{ state_attr(''sun.sun'', ''elevation'') < 6 }}'
      sequence:
      - target:
          area_id: 2nd_floor
        action: light.turn_on
        data:
          brightness_pct: "{% set hour = now().hour %} {% if hour == 0 %}\n  30\n{%
            elif hour == 1 %}\n  10\n{% elif 2 <= hour < 6 %}\n  5\n{% elif hour in
            [6, 7] %}\n  50\n{% else %}\n  100\n{% endif %}\n"
        alias: Turn lights on (dynamic brightness)
      alias: Lights on
    - conditions:
      - condition: trigger
        id: cycle
      - condition: template
        value_template: "{% set sensors = [\n  'binary_sensor.presence_sensor_fp2_9c35_presence_sensor_6',\n
          \ 'binary_sensor.presence_sensor_fp2_9c35_presence_sensor_7',\n  'binary_sensor.presence_sensor_fp2_9c35_presence_sensor_11',\n
          \ 'binary_sensor.presence_sensor_fp2_9c35_presence_sensor_4',\n  'binary_sensor.presence_sensor_fp2_9c35_presence_sensor_10'\n]
          %} {% set sensor_objs = expand(sensors) | list %} {% if sensor_objs | selectattr('state',
          'eq', 'on') | list %}\n  false\n{% else %}\n  {% set last_active = sensor_objs
          | map(attribute='last_changed') | max %}\n  {{ (now() - last_active).total_seconds()
          > (minutes_of_absence_till_auto_off|int * 60) }}\n{% endif %}\n"
      sequence:
      - target:
          area_id: 2nd_floor
        action: light.turn_off
        data:
          transition: 3
      alias: Lights off
  variables:
    minutes_of_absence_till_auto_off: 3
  mode: single
- id: '1725831360136'
  alias: Lights - Bathroom
  description: ''
  triggers:
  - entity_id:
    - binary_sensor.ms08_motion
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_9
    to: 'on'
    id: bathroom_presence
    trigger: state
  - entity_id:
    - binary_sensor.ms08_motion
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_9
    to: 'off'
    from: 'on'
    id: bathroom_absence
    trigger: state
  - entity_id: light.bathroom_light
    to: 'on'
    id: manual_switch_on
    trigger: state
  - value_template: '{{ now().timestamp() | int >= (as_timestamp(state_attr(''sun.sun'',
      ''next_rising'')) + 1800) | int }}

      '
    id: morning_brightness_reset
    trigger: template
    alias: Reset brightness to 100% every morning
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id: bathroom_presence
      - alias: If it's dark outside
        condition: template
        value_template: '{{ state_attr(''sun.sun'', ''elevation'') < 6 }}'
      sequence:
      - entity_id: input_boolean.bathroom_light_auto_controlled
        action: input_boolean.turn_on
      - entity_id: light.bathroom_light
        data:
          brightness_pct: '{% set hour = now().hour %}  {% if hour == 1 %} 75  {%
            elif 2 <= hour < 6 %} 50  {% elif hour in [6, 7] %} 75  {% else %} 100  {%
            endif %}

            '
        action: light.turn_on
      - delay: 00:00:02
      - entity_id: input_boolean.bathroom_light_auto_controlled
        action: input_boolean.turn_off
      alias: 'Lights: Auto-ON'
    - conditions:
      - condition: template
        value_template: "{{ (is_state('binary_sensor.ms08_motion', 'off') or is_state('binary_sensor.ms08_motion',
          'unavailable')) and \n   (is_state('binary_sensor.presence_sensor_fp2_9c35_presence_sensor_9',
          'off') or is_state('binary_sensor.presence_sensor_fp2_9c35_presence_sensor_9',
          'unavailable')) }}\n"
      sequence:
      - target:
          entity_id: light.bathroom_light
        data:
          transition: 300
        action: light.turn_off
      alias: 'Lights: Auto-OFF'
    - conditions:
      - condition: trigger
        id: manual_switch_on
      - condition: state
        entity_id: input_boolean.bathroom_light_auto_controlled
        state: 'off'
      sequence:
      - entity_id: light.bathroom_light
        data:
          brightness_pct: 100
        action: light.turn_on
      alias: 'Lights: Manual Override'
    - conditions:
      - condition: trigger
        id: morning_brightness_reset
      sequence:
      - entity_id: light.bathroom_light
        data:
          brightness_pct: 100
        action: light.turn_on
      - delay: 00:00:02
      - entity_id: light.bathroom_light
        action: light.turn_off
      alias: 'Lights: Morning Reset'
  mode: single
- id: '1726350741107'
  alias: Track Direction of Travel Between Zones (Office, Floor 02, Bedroom)
  triggers:
  - entity_id:
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_2
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_10
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_3
    to: 'on'
    trigger: state
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ trigger.entity_id == 'binary_sensor.presence_sensor_fp2_9c35_presence_sensor_10'
          \n   and (as_timestamp(now()) - as_timestamp(states.binary_sensor.presence_sensor_fp2_9c35_presence_sensor_2.last_changed))
          < 10 }}\n"
      sequence:
      - data:
          entity_id: input_text.last_zone_transition
          value: Bedroom to Floor 02
        action: input_text.set_value
      - data:
          entity_id: input_datetime.last_zone_transition_time
          datetime: '{{ now().isoformat() }}'
        action: input_datetime.set_datetime
      - data:
          message: Movement from Bedroom to Floor 02
        action: notify.mobile_app_phone_c
    - conditions:
      - condition: template
        value_template: "{{ trigger.entity_id == 'binary_sensor.presence_sensor_fp2_9c35_presence_sensor_2'
          \n   and (as_timestamp(now()) - as_timestamp(states.binary_sensor.presence_sensor_fp2_9c35_presence_sensor_10.last_changed))
          < 10 }}\n"
      sequence:
      - data:
          entity_id: input_text.last_zone_transition
          value: Floor 02 to Bedroom
        action: input_text.set_value
      - data:
          entity_id: input_datetime.last_zone_transition_time
          datetime: '{{ now().isoformat() }}'
        action: input_datetime.set_datetime
      - data:
          message: Movement from Floor 02 to Bedroom
        action: notify.mobile_app_phone_c
    - conditions:
      - condition: template
        value_template: "{{ trigger.entity_id == 'binary_sensor.presence_sensor_fp2_9c35_presence_sensor_3'
          \n   and (as_timestamp(now()) - as_timestamp(states.binary_sensor.presence_sensor_fp2_9c35_presence_sensor_10.last_changed))
          < 10 }}\n"
      sequence:
      - data:
          entity_id: input_text.last_zone_transition
          value: Floor 02 to Office
        action: input_text.set_value
      - data:
          entity_id: input_datetime.last_zone_transition_time
          datetime: '{{ now().isoformat() }}'
        action: input_datetime.set_datetime
      - data:
          message: Movement from Floor 02 to Office
        action: notify.mobile_app_phone_c
    - conditions:
      - condition: template
        value_template: "{{ trigger.entity_id == 'binary_sensor.presence_sensor_fp2_9c35_presence_sensor_10'
          \n   and (as_timestamp(now()) - as_timestamp(states.binary_sensor.presence_sensor_fp2_9c35_presence_sensor_3.last_changed))
          < 10 }}\n"
      sequence:
      - data:
          entity_id: input_text.last_zone_transition
          value: Office to Floor 02
        action: input_text.set_value
      - data:
          entity_id: input_datetime.last_zone_transition_time
          datetime: '{{ now().isoformat() }}'
        action: input_datetime.set_datetime
      - data:
          message: Movement from Office to Floor 02
        action: notify.mobile_app_phone_c
  mode: single
- id: '1728151219683'
  alias: Window Blinds control
  description: ''
  triggers:
  - event_type: hue_event
    event_data:
      id: hue_smart_button_1_button_1
      event: initial_press
    trigger: event
  conditions: []
  actions:
  - variables:
      left_blind: cover.aqara_roller_shade_driver_e1_cover_6
      right_blind: cover.aqara_roller_shade_driver_e1_cover_5
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ is_state(left_blind, 'opening') or is_state(left_blind,
          'closing') or\n   is_state(right_blind, 'opening') or is_state(right_blind,
          'closing') }}\n"
      sequence:
      - target:
          entity_id:
          - '{{ left_blind }}'
          - '{{ right_blind }}'
        action: cover.stop_cover
    - conditions: []
      sequence:
      - variables:
          left_position: '{{ state_attr(left_blind, ''current_position'') | int(0)
            }}'
          right_position: '{{ state_attr(right_blind, ''current_position'') | int(0)
            }}'
          average_position: '{{ (left_position + right_position) / 2 }}'
      - choose:
        - conditions:
          - condition: template
            value_template: '{{ average_position >= 50 }}'
          sequence:
          - target:
              entity_id:
              - '{{ left_blind }}'
              - '{{ right_blind }}'
            action: cover.close_cover
        - conditions:
          - condition: template
            value_template: '{{ average_position < 50 }}'
          sequence:
          - target:
              entity_id:
              - '{{ left_blind }}'
              - '{{ right_blind }}'
            action: cover.open_cover
  mode: single
- id: '1733346292899'
  alias: Motion Alert Enhanced
  description: ''
  triggers:
  - id: normal_alert
    entity_id:
    - light.bedroom
    - switch.sonoff_zbminil2_switch
    - light.room_02
    - binary_sensor.vs00_vibration
    - binary_sensor.vs00_vibrationp
    - binary_sensor.ds06_position
    - binary_sensor.ds06_motion
    - binary_sensor.motion_sensor_1503
    - binary_sensor.ms05_motion
    - binary_sensor.ms04_motion
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_4
    - light.2nd_floor
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_10
    - binary_sensor.presence_sensor_fp2_07a0_presence_sensor_5
    - binary_sensor.vs05_vibration
    - light.bathroom_light
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_9
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_6
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_7
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_11
    - binary_sensor.withings_c_in_bed
    - binary_sensor.withings_e_in_bed
    to: 'on'
    trigger: state
  conditions: []
  actions:
  - variables:
      title_text: '{{ trigger.to_state.attributes.device_class if trigger is defined
        else ''Test'' }}

        '
      message_text: "{% if trigger is defined and trigger.to_state.entity_id.startswith('light.')
        %}\n  {{ trigger.to_state.attributes.friendly_name }} light turned on\n{%
        else %}\n  {{ trigger.to_state.attributes.friendly_name if trigger is defined
        else 'Manual trigger success' }}\n{% endif %}\n"
  - parallel:
    - alias: Sound Alert
      if:
      - condition: state
        entity_id: input_boolean.sonos_play_notifications
        state: 'on'
      then:
      - continue_on_error: true
        target:
          entity_id: media_player.sonos_speaker
        data:
          media_content_id: media-source://media_source/local/sound/tech_click_2s_ver12.wav
          media_content_type: audio/x-wav
        action: media_player.play_media
    - alias: 'Notify: C PC'
      if:
      - condition: state
        entity_id: input_boolean.c_pc_display_notifications
        state: 'on'
      then:
      - continue_on_error: true
        data:
          title: '{{ title_text }}'
          message: '{{ message_text }}'
        action: rest_command.send_hass_agent_notification
    - alias: 'Notify: C phone'
      sequence:
      - variables:
          tag_id: c-phone-{{ now().timestamp() | int }}
      - continue_on_error: true
        data:
          title: '{{ title_text }}'
          message: '{{ message_text }}'
          data:
            priority: high
            channel: alarm_stream
            color: '#FF918A'
            sticky: false
            persistent: false
            notification_icon: mdi:run
            tag: '{{ tag_id }}'
            timeout: 60
        action: notify.mobile_app_phone_c
      - delay:
          seconds: 20
      - continue_on_error: true
        data:
          message: clear_notification
          data:
            tag: '{{ tag_id }}'
        action: notify.mobile_app_phone_c
    - alias: 'Notify: C iPad'
      sequence:
      - variables:
          tag_id: c-tablet-{{ now().timestamp() | int }}
      - continue_on_error: true
        data:
          title: '{{ title_text }}'
          message: '{{ message_text }}'
          data:
            tag: '{{ tag_id }}'
        action: notify.mobile_app_ipad
      - delay:
          seconds: 20
      - continue_on_error: true
        data:
          message: clear_notification
          data:
            tag: '{{ tag_id }}'
        action: notify.mobile_app_ipad
  mode: parallel
- id: '1733660728192'
  alias: Lights - Bedroom
  description: Turns off the room light based on presence and home status.
  triggers:
  - minutes: /15
    trigger: time_pattern
  - entity_id:
    - person.cam
    - person.enhy
    trigger: state
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: "{% set last_changed = states.binary_sensor.presence_sensor_fp2_07a0_presence_sensor_1_2.last_changed
          %} {{\n  states('binary_sensor.presence_sensor_fp2_07a0_presence_sensor_1_2')
          != 'on' and\n  (now() | as_timestamp - last_changed) > 900\n}}"
      - condition: template
        value_template: "{% set last_changed = states.binary_sensor.withings_e_in_bed.last_changed
          %} {{\n  states('binary_sensor.withings_e_in_bed') != 'on' and\n  (now()
          | as_timestamp - last_changed) > 900\n}}"
      sequence:
      - target:
          entity_id: light.room_02
        action: light.turn_off
    - conditions:
      - condition: template
        value_template: '{{ not is_state(''person.cam'', ''home'') and not is_state(''person.enhy'',
          ''home'') }}'
      sequence:
      - target:
          entity_id: light.room_02
        action: light.turn_off
  mode: single
- id: '1733907455655'
  alias: Cameras - Conditionally pause motion detection
  description: Ignore motion detection during camera mode changes or light events
    for c05, c08, and c09
  triggers:
  - entity_id:
    - select.c05_day_night_mode
    - number.c05_image_brightness
    - number.c05_image_contrast
    - number.c05_image_saturation
    - number.c05_image_sharpness
    - number.c05_day_night_switch_threshold
    - switch.c05_infra_red_lights_in_night_mode
    - select.c08_day_night_mode
    - number.c08_image_brightness
    - number.c08_image_contrast
    - number.c08_image_saturation
    - number.c08_image_sharpness
    - number.c08_day_night_switch_threshold
    - switch.c08_infra_red_lights_in_night_mode
    - select.c09_day_night_mode
    - number.c09_image_brightness
    - number.c09_image_contrast
    - number.c09_image_saturation
    - number.c09_image_sharpness
    - number.c09_day_night_switch_threshold
    - switch.c09_infra_red_lights_in_night_mode
    trigger: state
  conditions: []
  actions:
  - target:
      entity_id:
      - binary_sensor.c05_motion
      - binary_sensor.c08_motion
      - binary_sensor.c09_motion
    action: homeassistant.turn_off
    data: {}
  - delay:
      seconds: 10
  - target:
      entity_id:
      - binary_sensor.c05_motion
      - binary_sensor.c08_motion
      - binary_sensor.c09_motion
    action: homeassistant.turn_on
    data: {}
  variables:
    delay_seconds: 10
  mode: single
- id: '1734279037282'
  alias: Lights - Office
  description: ''
  triggers:
  - entity_id: person.cam
    to: not_home
    trigger: state
    id: absence
  - entity_id:
    - sensor.c_pc_a_lastactive
    for:
      hours: 0
      minutes: 30
      seconds: 0
    trigger: state
    id: absence
  - trigger: state
    entity_id:
    - binary_sensor.ds00_position
    - binary_sensor.vs02_c_door_vibration_2
    to: 'on'
    id: Room entry
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id: absence
      sequence:
      - target:
          entity_id: light.bedroom
        action: light.turn_off
        data: {}
      alias: 'Absence: Turn lights off'
    - conditions:
      - condition: trigger
        id: Room entry
      - alias: If it's dark outside
        condition: template
        value_template: '{{ state_attr(''sun.sun'', ''elevation'') < 6 }}'
      - alias: If PC hasn't been used in past minute
        condition: template
        value_template: '{{ (now() | as_timestamp) - (states.sensor.c_pc_a_lastactive.last_changed
          | as_timestamp) > 60 }}

          '
      - alias: 'If lights werent just turn off '
        condition: template
        value_template: '{{ (now() | as_timestamp) - (states.light.bedroom.last_changed
          | as_timestamp) > 30 }}'
      sequence:
      - entity_id: scene.bedroom_energise
        action: scene.turn_on
      alias: 'Entry: Turn lights on'
- id: '1734298389208'
  alias: Set Timer from DateTime
  triggers:
  - entity_id: input_datetime.dashboard_timer
    trigger: state
  actions:
  - data_template:
      entity_id: timer.dashboard_timer
      duration: "{{ '%02d:%02d:%02d' | format(\n    state_attr('input_datetime.dashboard_timer',
        'hour') | int,\n    state_attr('input_datetime.dashboard_timer', 'minute')
        | int,\n    state_attr('input_datetime.dashboard_timer', 'second') | int\n)
        }}\n"
    action: timer.set_duration
  mode: single
- id: '1734538611461'
  alias: Motion - Minimize PC windows
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_7
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_11
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_10
    - binary_sensor.vs01_vibration
    to: 'on'
  conditions: []
  actions:
  - action: mqtt.publish
    data:
      topic: homeassistant/switch/CPC/safemode_command/action
      payload: '"D:\Home Assistant HASS scripts\minimize_windows.py"'
    alias: Minimize windows on PC
  mode: single
- id: '1735670826357'
  alias: AI - Frontend text query
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_text.ai_main_text_user_query
  conditions:
  - condition: template
    value_template: '{{ trigger.to_state.state | length > 2 }}'
  actions:
  - action: ha_text_ai.ask_question
    data:
      context_messages: 3
      max_tokens: 1000
      instance: sensor.ha_text_ai_my_assistant
      question: '"{{ trigger.to_state.state }}"'
  - target:
      entity_id: input_text.ai_main_text_user_query
    data:
      value: ''
    action: input_text.set_value
  mode: single
- id: '1735996285679'
  alias: Calendar Event Notifications
  description: Smart calendar notifications based on timing and calendar ownership
  triggers:
  - hours: '*'
    minutes: '0'
    trigger: time_pattern
  - event_type: test_calendar_notifications
    id: manual_test
    trigger: event
  actions:
  - data:
      start_date_time: '{{ now().isoformat() }}'
      end_date_time: '{{ (now() + timedelta(days=4)).isoformat() }}'
    response_variable: calendar_events
    action: calendar.get_events
  - variables:
      processed_events: "[{% for cal in calendar_events %}\n  {% for e in cal.events
        %}\n    {% set days_until = (e.start.date() - now().date()).days %}\n    {%
        set hours_until = ((as_timestamp(e.start) - now().timestamp()) / 3600) | round(1)
        %}\n    {\"calendar\": cal.name,\n     \"summary\": e.summary,\n     \"start\":
        e.start,\n     \"start_date\": e.start.strftime('%Y-%m-%d'),\n     \"all_day\":
        e.all_day,\n     \"description\": e.description | default(''),\n     \"location\":
        e.location | default(''),\n     \"days_until\": days_until,\n     \"hours_until\":
        hours_until,\n     \"start_time\": e.start.strftime('%H:%M')}\n    {% if not
        loop.last or not loop.parent.last %},{% endif %}\n  {% endfor %}\n{% endfor
        %}]"
  - repeat:
      for_each: '{{ notifications | list }}'
      sequence:
      - variables:
          notif_key: '{{ repeat.item }}'
          notif_cfg: '{{ notifications[notif_key] }}'
          run_notification: "{{ test_mode and (test_type in ['all', notif_key])\n
            \  or notif_cfg.time == current_time\n   or (notif_cfg.time == '*:00'
            and current_time.endswith(':00')) }}"
      - condition: template
        value_template: '{{ run_notification }}'
      - repeat:
          for_each: '{{ recipients | list }}'
          sequence:
          - variables:
              recipient_key: '{{ repeat.item }}'
              recipient: '{{ recipients[recipient_key] }}'
              events: "{% set filtered = processed_events\n  | selectattr('calendar',
                'in', recipient.calendars)\n  | selectattr('days_until', 'equalto',
                notif_cfg.days_ahead | default(None))\n  | selectattr('hours_until',
                'equalto', notif_cfg.hours_ahead | default(None))\n  | selectattr('start_time',
                '>=', notif_cfg.min_time | default('00:00'))\n%} {% set filtered =
                (\n  filtered\n  | selectattr('all_day', 'equalto', true) if notif_cfg.all_day
                is defined and notif_cfg.all_day == true else\n  (filtered\n    |
                selectattr('all_day', 'equalto', false) if notif_cfg.all_day is defined
                and notif_cfg.all_day == false else\n    filtered)\n) %} {{ filtered
                | list }}"
          - condition: template
            value_template: '{{ events | length > 0 }}'
          - data:
              title: '{{ notif_cfg.title }}'
              message: "{{ notif_cfg.prefix | replace('{{ date }}', events[0].start_date)
                }} {% for e in events %}\n  • {{ e.summary }}{{ '' if e.all_day else
                (' at ' ~ e.start_time) }}{{ (' (' ~ e.location ~ ')') if e.location
                }}{{ ': ' ~ e.description if e.description }}\n{% endfor %}"
            action: '{{ recipient.service }}'
  variables:
    recipients:
      cam:
        service: notify.mobile_app_phone_c
        calendars:
        - calendar.cam
        - calendar.both
        - calendar.special_day
      enhy:
        service: notify.mobile_app_phone_e
        calendars:
        - calendar.enhy
        - calendar.both
        - calendar.special_day
    notifications:
      threeday:
        time: '15:00'
        days_ahead: 3
        title: Calendar Events - 3 Day Reminder
        prefix: Upcoming in 3 days ({{ date }})
      tomorrow:
        time: 09:00
        days_ahead: 1
        title: Calendar Events - Tomorrow
        prefix: Tomorrow's events ({{ date }})
      today:
        time: 06:00
        days_ahead: 0
        title: Calendar Events - Today
        prefix: Today's events
        min_time: 06:00
      hour:
        time: '*:00'
        hours_ahead: 1
        title: Calendar Events - Starting Soon
        prefix: Events starting in 1 hour
        all_day: false
    test_mode: '{{ trigger.id == ''manual_test'' }}'
    test_type: '{{ trigger.event.data.type | default(''all'') if test_mode }}'
    current_time: '{{ now().strftime(''%H:%M'') }}'
- id: '1736077081113'
  alias: Lights - Floor 01
  description: Fully optimized automation for Floor 01 lights.
  triggers:
  - id: Presence
    entity_id:
    - binary_sensor.ms05_motion
    - binary_sensor.ms04_motion
    - binary_sensor.vs00_vibrationp
    - binary_sensor.vs05_vibration
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_6
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_7
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_4
    to: 'on'
    trigger: state
  - id: Motion_Change
    entity_id:
    - binary_sensor.ms05_motion
    - binary_sensor.ms04_motion
    - binary_sensor.vs00_vibrationp
    - binary_sensor.vs05_vibration
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_6
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_7
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_4
    - binary_sensor.c08_motion
    trigger: state
  - id: cycle
    minutes: /2
    trigger: time_pattern
  - id: light_state_changed
    entity_id: switch.sonoff_zbminil2_switch
    trigger: state
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.id == ''light_state_changed'' and is_manual }}'
      - condition: state
        entity_id: timer.light_override
        state: idle
      sequence:
      - target:
          entity_id: timer.light_override
        data:
          duration: 00:{{ '%02d' | format(minutes_to_respect_manual_input|int) }}:00
        action: timer.start
      - target:
          entity_id: input_boolean.floor01_auto_active
        action: input_boolean.turn_off
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ trigger.id == ''Presence'' }}'
      - condition: state
        entity_id: switch.sonoff_zbminil2_switch
        state: 'off'
      - condition: template
        value_template: '{{ state_attr(''sun.sun'', ''elevation'') < 6 }}'
      - condition: state
        entity_id: timer.light_override
        state: idle
      - condition: template
        value_template: "{% if trigger.entity_id == 'binary_sensor.vs00_vibrationp'
          and is_quiet_hours %}\n  {{ has_recent_activity }}\n{% else %}\n  true\n{%
          endif %}"
      sequence:
      - target:
          entity_id: input_boolean.floor01_auto_active
        action: input_boolean.turn_on
        data: {}
      - target:
          entity_id: switch.sonoff_zbminil2_switch
        action: switch.turn_on
        data: {}
      - delay:
          seconds: 2
      - target:
          entity_id: input_boolean.floor01_auto_active
        action: input_boolean.turn_off
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ trigger.id is defined and trigger.id in [''Motion_Change'',
          ''cycle''] }}'
      - condition: state
        entity_id: timer.light_override
        state: idle
      - condition: template
        value_template: '{{ state_attr(''sun.sun'', ''elevation'') < 6 }}'
      - condition: template
        value_template: "{% set sensors = expand('binary_sensor.ms05_motion','binary_sensor.ms04_motion','binary_sensor.vs00_vibrationp','binary_sensor.vs05_vibration','binary_sensor.presence_sensor_fp2_9c35_presence_sensor_6','binary_sensor.presence_sensor_fp2_9c35_presence_sensor_7','binary_sensor.presence_sensor_fp2_9c35_presence_sensor_4')
          %} {% if sensors | selectattr('state', 'eq', 'on') | list %}\n  false\n{%
          else %}\n  {% set last_active = sensors | map(attribute='last_changed')
          | max %}\n  {{ (now() - last_active).total_seconds() > (minutes_of_absence_till_auto_off|int
          * 60) }}\n{% endif %}\n"
      sequence:
      - target:
          entity_id: input_boolean.floor01_auto_active
        action: input_boolean.turn_on
        data: {}
      - target:
          entity_id: switch.sonoff_zbminil2_switch
        action: switch.turn_off
        data: {}
      - delay:
          seconds: 2
      - target:
          entity_id: input_boolean.floor01_auto_active
        action: input_boolean.turn_off
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ trigger.id is defined and trigger.id in [''Motion_Change'',
          ''cycle''] }}'
      - condition: state
        entity_id: timer.light_override
        state: idle
      - condition: template
        value_template: '{{ state_attr(''sun.sun'', ''elevation'') >= 6 }}'
      sequence:
      - target:
          entity_id: input_boolean.floor01_auto_active
        action: input_boolean.turn_on
        data: {}
      - target:
          entity_id: switch.sonoff_zbminil2_switch
        action: switch.turn_off
        data: {}
      - delay:
          seconds: 2
      - target:
          entity_id: input_boolean.floor01_auto_active
        action: input_boolean.turn_off
        data: {}
  variables:
    is_manual: '{{ trigger.id == ''light_state_changed'' and (trigger.context.user_id
      is not none or (trigger.from_state.state == ''on'' and trigger.to_state.state
      == ''off'' and not is_state(''input_boolean.floor01_auto_active'', ''on'')))
      }}

      '
    motion_sensors: "{{ [\n  'binary_sensor.ms05_motion',\n  'binary_sensor.ms04_motion',\n
      \ 'binary_sensor.vs00_vibrationp',\n  'binary_sensor.vs05_vibration',\n  'binary_sensor.presence_sensor_fp2_9c35_presence_sensor_6',\n
      \ 'binary_sensor.presence_sensor_fp2_9c35_presence_sensor_7',\n  'binary_sensor.presence_sensor_fp2_9c35_presence_sensor_4'\n]
      }}\n"
    minutes_of_absence_till_auto_off: 2
    minutes_to_respect_manual_input: 5
    is_quiet_hours: '{{ now().hour >= 0 and now().hour < 7 }}'
    has_recent_activity: "{% set other_sensors = [\n  'binary_sensor.ms05_motion',\n
      \ 'binary_sensor.ms04_motion',\n  'binary_sensor.vs05_vibration',\n  'binary_sensor.presence_sensor_fp2_9c35_presence_sensor_6',\n
      \ 'binary_sensor.presence_sensor_fp2_9c35_presence_sensor_7',\n  'binary_sensor.presence_sensor_fp2_9c35_presence_sensor_4'\n]
      %} {% set sensors_expanded = expand(other_sensors) %} {% set has_activity =
      false %} {% for sensor in sensors_expanded %}\n  {% if sensor.state == 'on'
      or (now() - sensor.last_changed).total_seconds() < 3600 %}\n    {% set has_activity
      = true %}\n  {% endif %}\n{% endfor %} {{ has_activity }}\n"
  mode: single
- id: '1736540036989'
  alias: Motion - AI summary
  description: Analyzes motion events from cameras using AI and sends notifications
    to multiple devices
  triggers:
  - entity_id: binary_sensor.c05_motion
    to: 'on'
    id: c05_driveway
    alias: 'Triggers for: C05 - Driveway'
    trigger: state
  - alias: 'Triggers for: C08 - Floor 01'
    entity_id:
    - binary_sensor.ms04_motion
    - binary_sensor.ms05_motion
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_4
    - binary_sensor.vs00_vibrationp
    - binary_sensor.vs05_vibration
    - binary_sensor.presence_sensor_fp2_9c35_presence_sensor_6
    to: 'on'
    id: c08_floor01
    trigger: state
  conditions:
  - alias: 1 minute buffer before re-trigger allowed
    condition: template
    value_template: "{{ state_attr('automation.motion_ai_summary', 'last_triggered')
      is none or\n   (now() - state_attr('automation.motion_ai_summary', 'last_triggered'))
      > timedelta(minutes=1) }}\n"
  actions:
  - alias: Camera feed prompts for the AI
    choose:
    - conditions:
      - condition: template
        value_template: '{{ trigger.id == ''c05_driveway'' }}'
      sequence:
      - alias: 'AI prompt: Driveway & Road'
        data:
          remember: true
          duration: 3
          model: claude-3-5-sonnet-latest
          max_frames: 3
          include_filename: true
          target_width: 1280
          max_tokens: 100
          temperature: 0.2
          generate_title: true
          expose_images: true
          provider: 01JKHRYNMXDRT7H519T78H2XSH
          message: 'Check for persons on the brick driveway or its adjacent garden.
            If found, report their movement (entering or exiting) and note any delivery
            cues (uniform, branded vehicle, or carried items). If no persons are detected,
            look for vehicles slowing or stopping on the driveway and specify if they
            are branded or used for deliveries. Otherwise, examine the road spanning
            the driveway’s width for similar vehicles. When multiple events occur,
            choose the one nearest to the property. Respond with one sentence detailing
            the subject, direction (if applicable), action, location, and any delivery
            or service type. If only passing vehicles, pedestrians, shadows, animals,
            or peripheral motion is seen, return ''false_alarm''. Do not mention timestamps,
            weather, or lighting.

            '
          image_entity:
          - camera.c05_clear
        response_variable: response
        action: llmvision.stream_analyzer
      alias: Driveway prompt
    - conditions:
      - condition: template
        value_template: '{{ trigger.id == ''c08_floor01'' }}'
      sequence:
      - data:
          remember: true
          model: claude-3-5-sonnet-latest
          max_frames: 3
          include_filename: true
          max_tokens: 100
          temperature: 0.2
          provider: 01JKHRYNMXDRT7H519T78H2XSH
          image_entity:
          - camera.c08_clear
          generate_title: true
          expose_images: true
          target_width: 1280
          message: 'This security camera faces downward from the floor 01 hallway
            ceiling with a fisheye view showing right stairs to ground floor, left
            stairs to floor 02, and several room doors. Two small white dogs live
            here. Return exactly one sentence describing the most notable movement
            (examples: "an old man is going downstairs to ground floor", "a woman
            is carrying laundry to floor 02", "a child is running between rooms",
            "the white dog is playing with its toy"). For unclear or partial views
            use "a person". When multiple movements occur, describe the most prominent
            one. Write "false_alarm" for no movement. Never describe timestamps, lighting,
            or static objects.

            '
          duration: 3
        response_variable: response
        action: llmvision.stream_analyzer
      alias: Floor 01 prompt
    default: []
  - alias: Notifications
    choose:
    - conditions:
      - condition: template
        value_template: '{{ response.response_text != ''false_alarm'' }}'
        alias: If it is NOT a false alarm, proceed with notifications
      sequence:
      - variables:
          notify_id: '{{ now().timestamp() }}'
      - parallel:
        - data:
            message: '{{ response.response_text }}'
            title: Motion
            notification_id: motion-{{ notify_id }}
            ttl: 30000
            color: '#ff8080'
            icon: mdi:motion-sensor
          action: notify.mobile_app_phone_c
          alias: 'Notify: C phone'
        - data:
            message: '{{ response.response_text }}'
            title: Motion
            notification_id: motion-{{ notify_id }}
            ttl: 30000
            color: '#ff8080'
            icon: mdi:motion-sensor
          action: notify.mobile_app_phone_e
          alias: 'Notify: E phone'
        - data:
            title: Motion
            message: '{{ response.response_text }}'
          action: rest_command.send_hass_agent_notification
          alias: 'Notify: C PC'
        - sequence:
          - data:
              title: Motion
              message: '{{ response.response_text }}'
              data:
                tag: c-tablet-{{ notify_id }}
            action: notify.mobile_app_ipad
          - delay:
              seconds: 30
          - data:
              message: clear_notification
              data:
                tag: c-tablet-{{ notify_id }}
            action: notify.mobile_app_ipad
          alias: 'Notify: C iPad'
        alias: Issue notifications
  mode: single
- id: '1736585694735'
  alias: Pets - Food and Water Alerts
  description: Notifies when pet water or food is empty and creates/removes persistent
    notifications
  triggers:
  - entity_id:
    - binary_sensor.dog_water_fountain_water_level
    - binary_sensor.freshelement_3_fresh_element_3_food_level
    trigger: state
  - at:
    - 09:37:00
    - '11:03:00'
    - '13:03:00'
    - '15:03:00'
    - '17:03:00'
    - '19:03:00'
    - '21:03:00'
    trigger: time
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: binary_sensor.dog_water_fountain_water_level
        state: 'on'
      sequence:
      - data:
          message: "<speak>\n  <audio src=\"soundbank://soundlibrary/ui/gameshow/amzn_ui_sfx_gameshow_positive_response_02\"/>\n
            \ {{ [\n      \"The dog water needs refilling.\",\n      \"The dogs have
            no more water. Please refill the dog water.\",\n      \"The dogs water
            fountain has run out of water, time to refill.\",\n      \"The dogs have
            finished their water, please refill.\",\n      \"Warning. The dog water
            fountain is empty. It needs refilling.\"\n    ] | random }}\n</speak>\n"
        action: notify.alexa_media_echo_show_15
      - data:
          title: Dog Water Fountain Alert
          message: The dog water fountain is empty. Please refill it.
          notification_id: dog_water_alert
        action: persistent_notification.create
    - conditions:
      - condition: state
        entity_id: binary_sensor.freshelement_3_fresh_element_3_food_level
        state: 'on'
      sequence:
      - data:
          message: "<speak>\n  <audio src=\"soundbank://soundlibrary/ui/gameshow/amzn_ui_sfx_gameshow_positive_response_02\"/>\n
            \ {{ [\n      \"Warning. The dog food dispenser is empty.\",\n      \"It's
            time to refill the food dispenser for the dogs.\",\n      \"The dog food
            dispenser has run out of food. Please refill it.\",\n      \"The dog food
            dispenser needs to be refilled. It's run out of food.\",\n      \"The
            dog food dispenser has no more food. Please refill the dog food.\"\n    ]
            | random }}\n</speak>\n"
        action: notify.alexa_media_echo_show_15
      - data:
          title: Dog Food Dispenser Alert
          message: The dog food dispenser is empty. Please refill it.
          notification_id: dog_food_alert
        action: persistent_notification.create
    - conditions:
      - condition: state
        entity_id: binary_sensor.dog_water_fountain_water_level
        state: 'off'
      sequence:
      - data:
          notification_id: dog_water_alert
        action: persistent_notification.dismiss
    - conditions:
      - condition: state
        entity_id: binary_sensor.freshelement_3_fresh_element_3_food_level
        state: 'off'
      sequence:
      - data:
          notification_id: dog_food_alert
        action: persistent_notification.dismiss
  mode: single
- id: '1737635258526'
  alias: Update Train Service Summary
  description: Process train messages through AI and update summary display
  triggers:
  - entity_id: sensor.trains_east_croydon_to_purley_1m_walk
    attribute: message
    trigger: state
  actions:
  - data:
      instance: sensor.ha_text_ai_my_assistant
      context_messages: 1
      max_tokens: 2000
      question: 'say this using no more than 40 characters. Ignore issues about lifts
        or stairs, dont mention any links and if there are no issues just say the
        word clear: {{ state_attr(''sensor.trains_east_croydon_to_purley_1m_walk'',
        ''message'') }}'
    action: ha_text_ai.ask_question
  - delay:
      seconds: 5
  - target:
      entity_id: input_text.train_service_summary
    data:
      value: 'Travel alert: {{ state_attr(''sensor.ha_text_ai_my_assistant'', ''response'')
        | replace(''"'', '''') | replace("''", '''') | regex_replace(''\\.$'', '''')
        }}'
    action: input_text.set_value
- id: '1737814177854'
  alias: Light - Floor 01 (Ground floor switch)
  description: ''
  triggers:
  - device_id: f7cf0438e1069cd95c38447ad873e478
    domain: hue
    type: initial_press
    subtype: 1
    unique_id: c386ef2b-b213-48ec-bc41-4ad59ea1783b
    metadata: {}
    trigger: device
    enabled: false
  - trigger: state
    entity_id:
    - event.hue_wall_switch_module_5_button_1
    attribute: event_type
    to: initial_press
  conditions: []
  actions:
  - action: switch.toggle
    metadata: {}
    data: {}
    target:
      entity_id: switch.sonoff_zbminil2_switch
  mode: single
- id: '1737924303059'
  alias: Whatsapp - Translator (C, EN to ES)
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - input_text.translator_c_en_msg
  conditions:
  - condition: template
    value_template: '{{ trigger.to_state.state | length > 2 }}'
  actions:
  - action: ha_text_ai.ask_question
    data:
      context_messages: 1
      max_tokens: 4000
      instance: sensor.ha_text_ai_c_translator_en_to_es
      question: 'say this in Spanish: {{ trigger.to_state.state }}'
  - delay:
      hours: 0
      minutes: 0
      seconds: 2
  - data:
      clientId: c
      to: 447308254154@s.whatsapp.net
      body:
        text: '{{  state_attr(''sensor.ha_text_ai_c_translator_en_to_es'', ''response'')
          | replace(''"'', '''') | replace("''", '''') | regex_replace(''\\.$'', '''')
          }}

          '
    alias: Send reply to Enhy
    action: whatsapp.send_message
  - action: input_text.set_value
    data:
      value: ' '
    target:
      entity_id: input_text.translator_c_en_msg
  - alias: TTS - Alexa - Spanish Translation
    data:
      message: "<speak>\n  <voice name=\"Miguel\">\n    {{ state_attr('sensor.ha_text_ai_c_translator_en_to_es',
        'response')\n      | replace('\"', '') | replace(\"'\", '') \n      | regex_replace('[^a-zA-ZáéíóúÁÉÍÓÚñÑ.,
        ]', '') }}\n  </voice>\n</speak>"
    action: notify.alexa_media_echo_show_15
  mode: single
- id: '1739665462019'
  alias: Lights - Bedroom - Turn light panels off with Hue ones
  description: Turn off Elgato light panels when bedroom lights go off (prevents them
    staying on all night)
  triggers:
  - entity_id: light.room_02
    from: 'on'
    to: 'off'
    trigger: state
  actions:
  - target:
      entity_id:
      - light.elgato_panel_01
      - light.elgato_panel_02
    continue_on_error: true
    action: light.turn_off
  mode: restart
- id: '1740426170379'
  alias: whatsapp e incoming
  description: ''
  triggers:
  - trigger: event
    event_type: new_whatsapp_message
  conditions:
  - condition: template
    value_template: '

      {{ trigger.event.data.clientId == "e" and "@s" in trigger.event.data.key.remoteJid
      and ''status@broadcast'' not in trigger.event.data.key.remoteJid }}'
  actions:
  - action: input_text.set_value
    metadata: {}
    data:
      value: '{{ trigger.event.data.pushName | regex_replace('' .*'', '''') }} - {{
        trigger.event.data.message.conversation if trigger.event.data.type == ''conversation''
        else trigger.event.data.message.extendedTextMessage.text }}'
    target:
      entity_id: input_text.whatsapp_received_text_enhy
  mode: single
- id: '1740705439977'
  alias: Intruder alert
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.ds00_position
    - binary_sensor.ds06_position
    from: 'off'
    to: 'on'
  conditions:
  - condition: not
    conditions:
    - condition: state
      entity_id: person.cam
      state: home
  actions:
  - action: notify.mobile_app_phone_c
    metadata: {}
    data:
      title: INTRUDER
      message: OUR DOOR OPENED
  mode: single
- id: '1741853462729'
  alias: DS06 Position Alert (Enhanced Annoyance)
  description: ''
  triggers:
  - minutes: /5
    trigger: time_pattern
  - entity_id: person.enhy
    to: home
    trigger: state
  conditions:
  - condition: and
    conditions:
    - condition: state
      entity_id: binary_sensor.ds06_position
      state: 'on'
      for: 00:05:00
    - condition: state
      entity_id: person.enhy
      state: home
  actions:
  - repeat:
      until:
      - condition: state
        entity_id: binary_sensor.ds06_position
        state: 'off'
      sequence:
      - target:
          entity_id: light.room_02
        data:
          color_name: red
          brightness_pct: 100
          flash: long
        action: light.turn_on
      - data:
          message: "<speak>   \n  <audio src=\"soundbank://soundlibrary/scifi/amzn_sfx_scifi_alarm_06\"/>\n
            \ Close the door. <say-as interpret-as=\"interjection\">choo choo</say-as>.
            \       \n</speak>"
        action: notify.alexa_media_echo_show_15
      - delay: 00:02:00
      - if:
        - condition: state
          entity_id: binary_sensor.ds06_position
          state: 'on'
        then:
        - data:
            message: "<speak>   \n  <audio src=\"soundbank://soundlibrary/scifi/amzn_sfx_scifi_alarm_06\"/>\n
              \ Would you like a breeze? Perhaps I should order you a blanket. Close.
              The. Door.        \n</speak>"
          action: notify.alexa_media_echo_show_15
      - delay: 00:02:00
      - if:
        - condition: state
          entity_id: binary_sensor.ds06_position
          state: 'on'
        then:
        - data:
            message: "<speak>   \n  <audio src=\"soundbank://soundlibrary/scifi/amzn_sfx_scifi_alarm_06\"/>\n
              \ You seem to be struggling with doors today. Maybe I should get you
              an automatic one.        \n</speak>"
          action: notify.alexa_media_echo_show_15
      - delay: 00:00:30
  - target:
      entity_id: light.room_02
    data:
      color_name: white
      brightness_pct: 100
      flash: none
    action: light.turn_on
  mode: restart
- id: whatsapp_message_processor
  alias: ewhatsapp
  description: Processes incoming WhatsApp messages into a single input_text
  triggers:
  - event_type: new_whatsapp_message
    trigger: event
  conditions:
  - condition: template
    value_template: '{{ "@s" in trigger.event.data.key.remoteJid and trigger.event.data.key.remoteJid
      != "status@broadcast" }}'
  - condition: template
    value_template: '{{ trigger.event.data.clientId == "e" }}'
  actions:
  - data:
      entity_id: input_text.whatsapp_e_rec
      value: '{{ trigger.event.data.pushName | regex_replace('' .*'', '''') }} - {{
        trigger.event.data.message.conversation if trigger.event.data.type == ''conversation''
        else trigger.event.data.message.extendedTextMessage.text }}'
    action: input_text.set_value
  mode: parallel
  max: 10
- id: whatsapp_message_processor
  alias: ehasap
  description: Processes incoming WhatsApp messages into a single input_text
  triggers:
  - event_type: new_whatsapp_message
    trigger: event
  conditions:
  - condition: template
    value_template: '{{ "@s" in trigger.event.data.key.remoteJid and trigger.event.data.key.remoteJid
      != "status@broadcast" }}'
  - condition: template
    value_template: '{{ trigger.event.data.clientId == "e" }}'
  actions:
  - data:
      entity_id: input_text.whatsapp_e_rec
      value: '{{ trigger.event.data.pushName | regex_replace('' .*'', '''') }} - {{
        trigger.event.data.message.conversation if trigger.event.data.type == ''conversation''
        else trigger.event.data.message.extendedTextMessage.text }}'
    action: input_text.set_value
  mode: parallel
  max: 10
- id: '1742155927405'
  alias: Nuova automazione
  description: ''
  triggers:
  - event_type: whatsapp_presence_update
    event_data: {}
    trigger: event
  conditions:
  - condition: template
    value_template: '{{ trigger.event.data.presences[''447308254154@s.whatsapp.net''].lastKnownPresence
      == ''available'' }}'
  actions:
  - data:
      message: Contact is online!
    action: persistent_notification.create
  mode: single
- id: '1744669624474'
  alias: Shopping - Clubcard notification
  triggers:
  - entity_id:
    - person.cam
    - person.enhy
    zone: zone.tesco_purley
    event: enter
    id: enter
    trigger: zone
  - entity_id:
    - person.cam
    - person.enhy
    to: home
    id: clear
    trigger: state
  - entity_id:
    - sensor.location_cam_phone
    - sensor.location_enhy_phone
    attribute: postal_town
    id: clear
    trigger: state
  actions:
  - variables:
      phone: "{% set id = trigger.entity_id %} {% if 'cam' in id or id.split('_')
        | last == 'cam' %}\n  phone_c\n{% else %}\n  phone_e\n{% endif %}\n"
  - choose:
    - conditions: '{{ trigger.id == ''enter'' }}'
      sequence:
      - data:
          message: Scan this code
          title: Tesco Clubcard
          data:
            image: /local/media/image/shopping/tesco_clubcard_qr_code.png
            tag: clubcard_notify
        action: notify.mobile_app_{{ phone }}
    - conditions: '{{ trigger.id == ''clear'' }}'
      sequence:
      - data:
          message: clear_notification
          data:
            tag: clubcard_notify
        action: notify.mobile_app_{{ phone }}
  mode: single
