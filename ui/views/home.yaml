
# | START: home.yaml
# |  PATH: /config/ui/views/home.yaml


title: 'Home'
path: home
subview: false
type: sections
max_columns: 1
icon: ''



sections:
  - type: grid
    cards:
      - type: custom:button-card
        name: THIS IS THE AI ASSISTANT CARD, DONT DELETE
        show_name: false
        show_state: false
        show_icon: false
        show_label: false
        tap_action:
          haptic: success
          action: assist
          pipeline_id: preferred
        entity: tts.home_assistant_cloud
        styles:
          grid:
            - grid-template-areas: '"n ." "l ."'
            - grid-template-columns: 1fr min-content
            - grid-template-rows: 1fr min-content
          card:
            - height: 120px
            - width: 120px
            - background: none
            - '--mdc-ripple-color': transparent
            - overflow: hidden
            - position: fixed
            - bottom: 50px
            - right: 50px
            - z-index: 1
            - animation: bounceIn 1s 1s both
          custom_fields:
            custom_html:
              - position: absolute
              - left: 0
              - top: 0
              - right: 0
              - bottom: 0
              - z-index: 0
        custom_fields:
          tilt: |
            [[[ setTimeout(() => {
                let elt = this.shadowRoot.getElementById('card');
                if (elt && typeof VanillaTilt === 'function') {
                  VanillaTilt.init(elt, {
                    max: 7, // Slightly reduced for a more subtle tilt
                    scale: 1.02, // Slight increase for a noticeable, but not overdone, zoom effect
                    glare: true,
                    'max-glare': 0.2, // Reduced glare for a softer effect
                    perspective: 500, // Increased for a more realistic 3D effect
                    speed: 800, // Slightly faster transition
                    parallax: '30px' // Reduced parallax for smoother movement
                  });
                  elt.style.transition = 'transform 0.8s ease-out'; // Adjusted to match the speed for a smooth transition
                }
              }, 0); ]]]
          custom_html: |
            [[[
              return `
              <div class="container">
                <div id="chatbot">
                  <div class="dot"></div>
                  <div class="dot"></div>
                  <div class="dot"></div>
                </div>
                <div id="chatbot-corner"></div>
                <div id="antenna">
                  <div id="beam"></div>
                  <div id="beam-pulsar"></div>
                </div>
              </div>
              `
            ]]]
        extra_styles: |
          .container {
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            height: 115px;
            width: 115px;
            animation: up-down 7.5s infinite ease-in-out;
          }
          #chatbot {
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            width: 86px;
            height: 49px;
            border: 7px solid var(--primary-text-color);
            border-radius: 46px;
          }
          #chatbot-corner {
            position: absolute;
            top: 80px;
            left: 31px;
            width: 0;
            height: 0;
            border-left: 11px solid transparent;
            border-right: 11px solid transparent;
            border-top: 14px solid var(--primary-text-color);
            transform: rotate(140deg);
          }
          #antenna {
            position: absolute;
            top: 14px;
            left: 57px;
            height: 11px;
            width: 5.5px;
            background-color: var(--primary-text-color);
            animation: antenna-appear 7.5s infinite ease-in-out;
          }
          #beam {
            position: absolute;
            top: -7px;
            left: -3px;
            height: 11px;
            width: 11px;
            border-radius: 50%;
            background-color: var(--primary-text-color);
            animation: beam-appear 7.5s infinite ease-in-out;
          }
          #beam-pulsar {
            position: absolute;
            top: -7px;
            left: -3px;
            height: 11px;
            width: 11px;
            border-radius: 50%;
            background-color: var(--primary-text-color);
            animation: beam-pulsar-appear 7.5s infinite ease-in-out;
          }
          .dot {
            height: 9.5px;
            width: 9.5px;
            position: absolute;
            top: 50%;
            background-color: var(--primary-text-color);
            border-radius: 50%;
            animation: pulse-outer 7.5s infinite ease-in-out;
          }
          .dot:nth-child(1) {
            left: 16px;
            transform: translateY(-50%);
          }
          .dot:nth-child(2) {
            left: 42px;
            transform: translate(-50%, -50%);
            animation: pulse-inner 7.5s infinite ease-in-out;
            animation-delay: 0.2s;
          }
          .dot:nth-child(3) {
            right: 16px;
            transform: translateY(-50%);
            animation-delay: 0.4s;
          }
          @keyframes pulse-inner {
            0% { transform: translate(-50%, -50%) scale(1); }
            7.5% { transform: translate(-50%, -50%) scale(1.5); }
            15% { transform: translate(-50%, -50%) scale(1); }
            22.5% { transform: translate(-50%, -50%) scale(1.5); }
            30% { transform: translate(-50%, -50%) scale(1); }
            37.5% { transform: translate(-50%, -50%) scale(1.5); }
            45% { transform: translate(-50%, -50%) scale(1) rotate(-360deg); height: 9.5px; border-radius: 50%; }
            50% { transform: translate(-50%, 100%) scale(1.5) rotate(10deg); height: 5px; border-radius: 50% 50% 24px 24px / 50% 50% 15px 15px; }
            55% { transform: translate(-50%, 100%) scale(1.5) rotate(-10deg); }
            60% { transform: translate(-50%, 100%) scale(1.5) rotate(10deg); }
            65% { transform: translate(-50%, 100%) scale(1.5) rotate(0deg); }
            85% { transform: translate(-50%, 100%) scale(1.5) rotate(0deg); height: 5px; border-radius: 50% 50% 24px 24px / 50% 50% 15px 15px; }
            92.5% { transform: translate(-50%, 100%) scale(1.5) rotate(0deg); height: 5px; border-radius: 50% 50% 20px 20px / 50% 50% 12.5px 12.5px; }
            95% { transform: translate(-50%, -40%) scale(1.5) rotate(-360deg); height: 9.5px; border-radius: 50%; }
            100% { transform: translate(-50%, -50%) scale(1); }
          }
          @keyframes pulse-outer {
            0% { transform: translateY(-50%) scale(1); }
            7.5% { transform: translateY(-50%) scale(1.5); }
            15% { transform: translateY(-50%) scale(1); }
            22.5% { transform: translateY(-50%) scale(1.5); }
            30% { transform: translateY(-50%) scale(1); }
            37.5% { transform: translateY(-50%) scale(1.5); }
            45% { transform: translateY(-50%) scale(1); height: 9.5px; }
            55% { transform: translateY(-50%) scale(1); height: 3px; }
            60% { height: 9.5px; }
            75% { height: 9.5px; }
            80% { transform: translateY(-50%) scale(1); height: 3px; }
            85% { height: 9.5px; }
            100% { height: 9.5px; }
          }
          @keyframes antenna-appear {
            0% { visibility: hidden; top: 25px; height: 0 }
            50% { visibility: hidden; top: 25px; height: 0 }
            55% { visibility: visible; top: 14px; height: 11px; }
            95% { visibility: visible; top: 14px; height: 11px; }
            100% { top: 25px; height: 0; }
          }
          @keyframes beam-appear {
            0% { visibility: hidden; top: -7px; height: 0 }
            50% { visibility: hidden; top: -7px; height: 0 }
            55% { visibility: visible; top: -7px; height: 11px; width: 11px; }
            100% { visibility: visible; top: -7px; height: 11px; width: 11px; }
          }
          @keyframes beam-pulsar-appear {
            0% { visibility: hidden; top: -7px; height: 0 }
            50% { visibility: hidden; top: -7px; height: 0 }
            55% { visibility: visible; top: -7px; left: -3px; height: 11px; width: 11px; opacity: 1 }
            65% { top: -14px; left: -8px; height: 22px; width: 22px; opacity: 0; visibility: visible; }
            74% { visibility: hidden; opacity: 0; }
            75% { visibility: visible; top: -7px; left: -3px; height: 11px; width: 11px; opacity: 1 }
            85% { top: -14px; left: -8px; height: 22px; width: 22px; opacity: 0; visibility: visible; }
            94% { visibility: hidden; opacity: 0; }
            100% { visibility: hidden; opacity: 0; }
          }
          @keyframes up-down {
            0% { transform: translate(-50%, -50%); }
            12.5% { transform: translate(-50%, -48%); }
            25% { transform: translate(-50%, -50%); }
            37.5% { transform: translate(-50%, -48%); }
            50% { transform: translate(-50%, -50%); }
            62.5% { transform: translate(-50%, -48%); }
            75% { transform: translate(-50%, -50%); }
            87.5% { transform: translate(-50%, -48%); }
            100% { transform: translate(-50%, -50%); }
          }

          @keyframes bounceIn {
            0% { opacity: 0; transform: scale3d(0.3, 0.3, 0.3); }
            20% { transform: scale3d(1.1, 1.1, 1.1); }
            40% { transform: scale3d(0.9, 0.9, 0.9); }
            60% { opacity: 1; transform: scale3d(1.03, 1.03, 1.03); }
            80% { transform: scale3d(0.97, 0.97, 0.97); }
            100% { opacity: 1; transform: scale3d(1, 1, 1); }
          }

      - type: horizontal-stack
        cards:
          - type: custom:button-card
            show_name: true
            show_label: true
            show_icon: false
            show_state: false
            name: |
              [[[
                const hour = new Date().getHours();
                let greeting = [];

                if (hour >= 18 || hour < 5) {
                  greeting = [
                    "Good evening",
                    "Evening",
                    "Hello",
                    "Hi there",
                    "Hi",
                    "Hey there"
                  ];
                } else if (hour >= 12) {
                  greeting = [
                    "Good afternoon",
                    "Afternoon",
                    "Howdy",
                    "Hello",
                    "Hi there",
                    "Hey",
                    "Hi",
                    "Hola",
                    "Hey there"
                  ];
                } else {
                  greeting = [
                    "Good morning",
                    "Morning",
                    "Rise and shine,",
                    "Hello",
                    "Hi there",
                    "Hi",
                    "Hey there"
                  ];
                }

                 const userName = user && user.name === 'apple' ? 'Cam' : 'Enhy';
                return greeting[Math.floor(Math.random() * greeting.length)] + ' ' + userName;
              ]]]
            styles:
              card:
                - padding: 12px 0px 12px 10px
                - background-color: transparent
                - border: none
                - box-shadow: none
                - animation: slide-in 1s ease-out, opacity 1s ease-in
              name:
                - font-size: 24px
                - justify-self: start
                - align-self: center
                - text-align: left
                - white-space: normal
                - word-wrap: break-word
                - overflow: hidden
            extra_styles: |
              @keyframes slide-in {
                0% {transform: translateX(-2%);}
                100% {transform: translateX(0%);}
              }
              @keyframes opacity {
                0% {opacity:0;}
                100% {opacity:1;}
              }
        visibility:
          - condition: user
            users: []
      - type: custom:button-card
        show_icon: false
        show_label: true
        show_name: true
        variables:
          calendars:
            - calendar.both
            - calendar.cam
            - calendar.special_day
            - calendar.enhy
            - calendar.united_kingdom_eng
            - calendar.colombia
            - calendar.croydon_council
            - calendar.spain_cb
          calendar_colors:
            calendar.cam: var(--blue)
            calendar.enhy: var(--purple)
            calendar.both:
              type: gradient
              start: var(--blue)
              end: var(--purple)
            calendar.colombia: var(--yellow)
            calendar.spain_cb: var(--yellow)
          display_time: 1000
          char_delay: 0.06
          fade_duration: 2
          fade_in_delay: -0.4
          label_animation_offset: 0.12
          days_to_show: 28
        entity: calendar.enhy
        state:
          - operator: template
            value: |
              [[[ return true; ]]]
        triggers_update: all
        tap_action:
          action: navigate
          navigation_path: /calendar
          haptic: success
        styles:
          card:
            - animation: slide 2s 0.8s both
            - padding: 8px 8px 8px 88px
            - position: relative
            - background: none
            - box-shadow: none
            - '--mdc-ripple-color': rgba(0,0,0,0)
            - '--mdc-ripple-fg-opacity': 0
            - width: 100%
            - min-height: 100px
            - transform-style: preserve-3d
            - perspective: 1000px
          name:
            - font-family: SF Pro Text, Roboto, system-ui
            - font-size: 1.05rem
            - font-weight: normal
            - letter-spacing: 1px
            - text-align: left
            - padding-left: 71px
            - overflow: hidden
            - min-width: 350px
            - transform-style: preserve-3d
            - transform: translateZ(30px)
            - transition: transform 0.3s ease-out
          label:
            - font-family: SF Pro Text, Roboto, system-ui
            - font-size: 0.8rem
            - color: var(--secondary-text-color)
            - font-weight: normal
            - letter-spacing: 1px
            - word-spacing: 0px
            - text-align: left
            - padding-left: 71px
            - margin-top: '-3px'
            - overflow: hidden
            - min-width: 350px
            - transform-style: preserve-3d
            - transform: translateZ(20px)
            - transition: transform 0.3s ease-out
          custom_fields:
            date:
              - background: var(--contrast2)
              - border-radius: 20px
              - padding: 12px
              - display: flex
              - flex-direction: column
              - align-items: start
              - justify-content: center
              - width: 79px
              - height: 59%
              - position: absolute
              - left: 10px
              - top: 50%
              - transform: translateY(-50%) translateZ(60px)
              - box-shadow: 0 5px 15px rgba(0,0,0,0.2)
              - transition: all 0.3s ease-out
              - transform-style: preserve-3d
              - z-index: 1
              - overflow: hidden
            bar:
              - position: absolute
              - left: 138px
              - top: 20%
              - width: 8px
              - height: 60%
        extra_styles: |
          @keyframes textfadeoutro {
            0% {
              transform: translateX(0) scaleX(1);
              filter: blur(0);
              opacity: 1;
            }
            100% {
              transform: translateX(25px) scaleX(0.9);
              filter: blur(4px);
              opacity: 0;
            }
          }
          @keyframes textfadeintro {
            0% {
              transform: translateX(-25px) scaleX(0.9);
              filter: blur(4px);
              opacity: 0;
            }
            100% {
              transform: translateX(0) scaleX(1);
              filter: blur(0);
              opacity: 1;
            }
          }
          @keyframes barFadeIn {
            0%   { opacity: 0; }
            100% { opacity: 1; }
          }
          @keyframes slide {
            0% {transform: translateX(3%); opacity: 0;}
          }
        custom_fields:
          tilt: |
            [[[ 
              setTimeout(() => {
                let elt = this.shadowRoot.getElementById('card');
                if (elt && typeof VanillaTilt === 'function') {
                  VanillaTilt.init(elt, {
                    max: 7,
                    scale: 1.02,
                    glare: true,
                    'max-glare': 0.2,
                    perspective: 500,
                    speed: 800,
                    parallax: '30px'
                  });
                  elt.style.transition = 'transform 0.8s ease-out';
                }
              }, 0);
            ]]]
          date: |
            [[[
              // We'll do two intervals:
              //  1) Update the time text every second
              //  2) Every 5s, toggle date/time to get a consistent fade

              if (!window._dateTimeIntervalsSet) {
                setTimeout(() => {
                  const dateEl = this.shadowRoot?.querySelector('#dateEl');
                  const timeEl = this.shadowRoot?.querySelector('#timeEl');

                  if (!dateEl || !timeEl) return;

                  // 1) Update time text each second
                  setInterval(() => {
                    const now = new Date();
                    const hours   = now.getHours();
                    const minutes = now.getMinutes().toString().padStart(2, '0');
                    const seconds = now.getSeconds().toString().padStart(2, '0');
                    const hour12  = hours % 12 || 12;

                    // No extra spaces around ":" or "."
                    timeEl.innerHTML = `
                      <span style="color: var(--primary-text-color)">${hour12}</span><span style="color: var(--accent-color)">:</span><span style="color: var(--primary-text-color)">${minutes}</span><span style="color: var(--accent-color)">.</span><span style="font-size: 0.8rem; color: var(--secondary-text-color)">${seconds}</span>
                    `;
                  }, 1000);

                  // 2) Every 5s, swap date/time with smooth fade
                  let showTime = false; 
                  setInterval(() => {
                    showTime = !showTime; // toggle each cycle
                    if (showTime) {
                      // Time is visible => date is hidden
                      timeEl.style.opacity   = '1';
                      timeEl.style.transform = 'translateY(0)';
                      dateEl.style.opacity   = '0';
                      dateEl.style.transform = 'translateY(3px)';
                    } else {
                      // Date is visible => time is hidden
                      dateEl.style.opacity   = '1';
                      dateEl.style.transform = 'translateY(0)';
                      timeEl.style.opacity   = '0';
                      timeEl.style.transform = 'translateY(3px)';
                    }
                  }, 5000);
                }, 0);

                window._dateTimeIntervalsSet = true;
              }

              // Build the initial date with suffix in var(--primary-text-color), no space before suffix
              const now    = new Date();
              const month  = now.toLocaleString('default', { month: 'short' });
              const day    = now.getDate();
              const days   = ['Sun','Mon','Tue','Wed','Thur','Fri','Sat'];
              const getOrdinal = (n) => {
                const s = ['th','st','nd','rd'];
                const v = n % 100;
                return s[(v - 20) % 10] || s[v] || s[0];
              };
              const dateMarkup = `
                ${month} <span style="color: var(--accent-color)">${day}<sup style="font-size: 0.5em; color: var(--primary-text-color)">${getOrdinal(day)}</sup></span>
              `;
              const weekday = days[now.getDay()];

              return `
                <div style="position: relative; height: 100%; display: flex; flex-direction: column; justify-content: space-between;">
                  <div style="position: relative; flex-grow: 1;">
                    <!-- Date container starts visible -->
                    <div id="dateEl"
                         style="
                           position: absolute; top: 0; left: 0;
                           letter-spacing: 1px; 
                           font-size: 1.3em; 
                           font-weight: normal; 
                           text-align: right; 
                           transition: opacity ${variables.fade_duration}s ease-in-out, transform ${variables.fade_duration}s ease-in-out;
                           opacity: 1; 
                           transform: translateY(0);
                         ">
                      ${dateMarkup}
                    </div>
                    <!-- Time container starts hidden -->
                    <div id="timeEl"
                         style="
                           position: absolute; top: 0; left: 0;
                           letter-spacing: 1px;
                           font-size: 1.2em; 
                           font-weight: normal; 
                           text-align: right; 
                           transition: opacity ${variables.fade_duration}s ease-in-out, transform ${variables.fade_duration}s ease-in-out;
                           opacity: 0;
                           transform: translateY(10px);
                         ">
                      <!-- Updated by JS every second -->
                    </div>
                  </div>
                  <div style="letter-spacing: 2px; text-align: right; color: var(--secondary-text-color); font-size: 0.8em; text-align: left;">
                    ${weekday}
                  </div>
                </div>
              `;
            ]]]
          bar: |
            [[[ 
              // (Unchanged)
              const isWithinTimeframe = (calendar) => {
                if (!states[calendar]?.attributes?.start_time) return false;
                const startTime = new Date(states[calendar].attributes.start_time);
                const futureDate = new Date();
                futureDate.setDate(futureDate.getDate() + (variables.days_to_show || 28));
                return startTime <= futureDate;
              };

              const getAnimationTime = (message) => {
                return (message.length * variables.char_delay + variables.fade_duration) * 1000;
              };

              const getColor = (calendar) => {
                const color = variables.calendar_colors[calendar];
                if (!color) return 'var(--green)';
                if (typeof color === 'string') return color;
                if (color.type === 'gradient') {
                  return `linear-gradient(to bottom, ${color.start}, ${color.end})`;
                }
                return color;
              };

              const now = Date.now();
              const activeCalendars = variables.calendars.filter(cal => isWithinTimeframe(cal));
              if (activeCalendars.length === 0) {
                activeCalendars.push(variables.calendars[0]);
              }
              
              const maxAnimTime = Math.max(...activeCalendars.map(cal => {
                const msg = isWithinTimeframe(cal) 
                  ? (states[cal].attributes.message || 'No upcoming events')
                  : `No upcoming events in the next ${variables.days_to_show || 28} days`;
                return getAnimationTime(msg);
              }));
              
              const cycleTime = variables.display_time + (maxAnimTime * 2) + (variables.fade_in_delay * 1000);
              const cycleIndex = Math.floor(now / cycleTime) % activeCalendars.length;
              const current = activeCalendars[cycleIndex];
              const next = activeCalendars[(cycleIndex + 1) % activeCalendars.length];
              const shouldAnimate = (now % cycleTime) > variables.display_time;
              
              const currentColor = getColor(current);
              const nextColor = getColor(next);
              
              if (!shouldAnimate) {
                return `<div style="position:absolute;left:0;top:0;width:4px;height:100%;
                                   background:${currentColor};border-radius:2px;"></div>`;
              }
              
              return `
                <div style="position:absolute;left:0;top:0;width:4px;height:100%;">
                  <div style="position:absolute;left:0;top:0;width:100%;height:100%;
                              background:${currentColor};border-radius:2px;
                              opacity:1;transition:opacity ${variables.fade_duration}s ease-in-out;"></div>
                  <div style="position:absolute;left:0;top:0;width:100%;height:100%;
                              background:${nextColor};border-radius:2px;opacity:0;
                              transition:opacity ${variables.fade_duration}s ease-in-out;
                              animation:barFadeIn ${variables.fade_duration}s ease-in-out forwards;
                              animation-delay:${variables.fade_in_delay}s;"></div>
                </div>
              `;
            ]]]
        name: |
          [[[ 
            // (Unchanged)
            const isWithinTimeframe = (calendar) => {
              if (!states[calendar]?.attributes?.start_time) return false;
              const startTime = new Date(states[calendar].attributes.start_time);
              const futureDate = new Date();
              futureDate.setDate(futureDate.getDate() + (variables.days_to_show || 28));
              return startTime <= futureDate;
            };

            const getAnimationTime = (message) => {
              return (message.length * variables.char_delay + variables.fade_duration) * 1000;
            };

            const now = Date.now();
            const activeCalendars = variables.calendars.filter(cal => isWithinTimeframe(cal)) || [variables.calendars[0]];
            const maxAnimTime = Math.max(...activeCalendars.map(cal => {
              const msg = isWithinTimeframe(cal) 
                ? (states[cal].attributes.message || 'No upcoming events')
                : `No upcoming events in the next ${variables.days_to_show || 28} days`;
              return getAnimationTime(msg);
            }));
            
            const cycleTime = variables.display_time + (maxAnimTime * 2) + (variables.fade_in_delay * 1000);
            const cycleIndex = Math.floor(now / cycleTime) % activeCalendars.length;
            const current = activeCalendars[cycleIndex];
            const next = activeCalendars[(cycleIndex + 1) % activeCalendars.length];
            const shouldAnimate = (now % cycleTime) > variables.display_time;

            const currentMessage = isWithinTimeframe(current) 
              ? (states[current].attributes.message || 'No upcoming events')
              : `No upcoming events in the next ${variables.days_to_show || 28} days`;
            const nextMessage = isWithinTimeframe(next)
              ? (states[next].attributes.message || 'No upcoming events')
              : `No upcoming events in the next ${variables.days_to_show || 28} days`;

            const createAnimatedText = (text, isNext = false) => {
              return text.split('').map((char, i) => {
                const delay = (isNext ? variables.fade_in_delay : 0) + (i * variables.char_delay);
                const animation = isNext ? 'textfadeintro' : 'textfadeoutro';
                const initialOpacity = isNext ? '0' : '1';
                return `<span style="display:inline-block;opacity:${initialOpacity};
                              animation:${animation} ${variables.fade_duration}s cubic-bezier(0.4,0,0.2,1) forwards;
                              animation-delay:${delay}s;position:relative;">
                         ${char === ' ' ? '&nbsp;' : char}
                       </span>`;
              }).join('');
            };
            
            if (!shouldAnimate) {
              return `<div class="calendar-text" style="position:relative;min-height:1.5em;">
                        <div style="position:absolute;top:0;left:0;width:100%;">${currentMessage}</div>
                      </div>`;
            }
            
            return `
              <div class="calendar-text" style="position:relative;min-height:1.5em;">
                <div class="text-layer" style="position:absolute;top:0;left:0;width:100%;z-index:1;">
                  ${createAnimatedText(currentMessage)}
                </div>
                <div class="text-layer" style="position:absolute;top:0;left:0;width:100%;z-index:2;">
                  ${createAnimatedText(nextMessage, true)}
                </div>
              </div>
            `;
          ]]]
        label: |
          [[[ 
            // (Unchanged)
            const splitWithHtml = (str) => {
              const result = [];
              let currentTag = '';
              let inTag = false;
              
              for (let i = 0; i < str.length; i++) {
                const char = str[i];
                if (char === '<') {
                  inTag = true;
                  currentTag = char;
                  continue;
                }
                if (inTag) {
                  currentTag += char;
                  if (char === '>') {
                    result.push(currentTag);
                    currentTag = '';
                    inTag = false;
                  }
                  continue;
                }
                result.push(char);
              }
              return result;
            };

            const isWithinTimeframe = (calendar) => {
              if (!states[calendar]?.attributes?.start_time) return false;
              const startTime = new Date(states[calendar].attributes.start_time);
              const futureDate = new Date();
              futureDate.setDate(futureDate.getDate() + (variables.days_to_show || 28));
              return startTime <= futureDate;
            };

            const getAnimationTime = (message) => {
              return (message.length * variables.char_delay + variables.fade_duration) * 1000;
            };

            const now = Date.now();
            const activeCalendars = variables.calendars.filter(cal => isWithinTimeframe(cal));
            if (activeCalendars.length === 0) {
              activeCalendars.push(variables.calendars[0]);
            }
            
            const maxAnimTime = Math.max(...activeCalendars.map(cal => {
              const msg = isWithinTimeframe(cal) 
                ? (states[cal].attributes.message || 'No upcoming events')
                : `No upcoming events in the next ${variables.days_to_show || 28} days`;
              return getAnimationTime(msg);
            }));
            
            const cycleTime = variables.display_time + (maxAnimTime * 2) + (variables.fade_in_delay * 1000);
            const cycleIndex = Math.floor(now / cycleTime) % activeCalendars.length;
            const current = activeCalendars[cycleIndex];
            const next = activeCalendars[(cycleIndex + 1) % activeCalendars.length];
            const shouldAnimate = (now % cycleTime) > variables.display_time;

            const formatDate = (calendar) => {
              if (!states[calendar]?.attributes?.start_time) return 'No date available';
              const startTime = new Date(states[calendar].attributes.start_time);
              const endTime   = new Date(states[calendar].attributes.end_time || startTime);
              const midnight  = new Date().setHours(0,0,0,0);
              const startDays = Math.floor((startTime - midnight) / 86400000);
              const endDays   = Math.floor((endTime - midnight) / 86400000);
              const isAllDay  = states[calendar].attributes.all_day;
              const duration  = (isAllDay ? endDays - 1 : endDays) - startDays + 1;
              const timeStr   = !isAllDay
                ? startTime
                  .toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true })
                  .replace(':00','')
                  .toLowerCase()
                  .replace(' ','')
                : '';
              
              const getOrdinal = (n) => {
                const s = ['th','st','nd','rd'];
                const v = n % 100;
                return s[(v - 20) % 10] || s[v] || s[0];
              };
              
              const formatDay = (date, withWeekday = false) => {
                const days = Math.floor((date - midnight) / 86400000);
                if (days === 0) return 'today';
                if (days === 1) return 'Tomorrow';
                if (days < 8 && withWeekday) {
                  return date.toLocaleDateString('en-GB', { weekday: 'long' });
                }
                const dayNum    = date.getDate();
                const ordinalDay= `${dayNum}<sup>${getOrdinal(dayNum)}</sup>`;
                const monthName = date.toLocaleDateString('en-GB', { month: 'long' });
                return `${ordinalDay} ${monthName}`;
              };

              if (!isWithinTimeframe(calendar)) {
                return `No upcoming events in the next ${variables.days_to_show || 28} days`;
              }

              const isOvernight = (
                !isAllDay && endTime - startTime < 172800000 && 
                (endTime.getDate() !== startTime.getDate() || 
                 endTime.getMonth() !== startTime.getMonth() || 
                 endTime.getFullYear() !== startTime.getFullYear())
              ) || 
              (isAllDay && endTime - startTime <= 172800000);

              if (duration === 1) {
                if (isAllDay) {
                  if (startDays < 8) {
                    return startDays <= 1
                      ? ['Today', 'Tomorrow'][startDays]
                      : `On ${formatDay(startTime, true)}`;
                  }
                  return `On ${formatDay(startTime)}`;
                }
                if (startDays < 8) {
                  return startDays <= 1
                    ? `At ${timeStr} ${['today','tomorrow'][startDays]}`
                    : `At ${timeStr} on ${formatDay(startTime, true)}`;
                }
                return `At ${timeStr} on ${formatDay(startTime)}`;
              }
              
              if (isOvernight) {
                if (startDays === 0) return 'Tonight';
                if (startDays === 1) return 'Tomorrow overnight';
                if (startDays < 8) return `${formatDay(startTime, true)} overnight`;
                return `${formatDay(startTime)} overnight`;
              }
              
              return `${formatDay(startTime, startDays < 8)} to ${formatDay(endTime, endDays < 8)}`;
            };

            const currentLabel = formatDate(current);
            const nextLabel    = formatDate(next);

            const createAnimatedText = (text, isNext = false) => {
              return splitWithHtml(text).map((char, i) => {
                if (char.startsWith('<')) return char;
                const delay = (isNext ? variables.fade_in_delay : 0) + (i * variables.char_delay);
                const animation = isNext ? 'textfadeintro' : 'textfadeoutro';
                const initialOpacity = isNext ? '0' : '1';
                return `<span style="display:inline-block;opacity:${initialOpacity};
                              animation:${animation} ${variables.fade_duration}s cubic-bezier(0.4,0,0.2,1) forwards;
                              animation-delay:${delay}s;position:relative;">
                         ${char === ' ' ? '&nbsp;' : char}
                       </span>`;
              }).join('');
            };
            
            if (!shouldAnimate) {
              return `<div style="position:relative;min-height:1.5em;">
                        <div style="position:absolute;top:0;left:0;width:100%;">${currentLabel}</div>
                      </div>`;
            }
            
            return `
              <div style="position:relative;min-height:1.5em;">
                <div style="position:absolute;top:0;left:0;width:100%;z-index:1;">
                  ${createAnimatedText(currentLabel)}
                </div>
                <div style="position:absolute;top:0;left:0;width:100%;z-index:2;">
                  ${createAnimatedText(nextLabel, true)}
                </div>
              </div>
            `;
          ]]]

      - square: false
        type: grid
        cards:
          - type: custom:button-card
            name: |
              [[[
                const name = 'Bedroom';
                return `<span>${name.split('').map((letter, index) => `<span style="display: inline-block; animation: textfadeintro 1s both; animation-delay: ${1 + index * 0.1}s;">${letter}</span>`).join('')}</span>`;
              ]]]
            icon: phu:rooms-bedroom
            tap_action:
              action: navigate
              navigation_path: /dashboard-home/bedroom
            custom_fields:
              state: |
                [[[
                  const stateValue = Math.round(states['sensor.hub_2_8ab7'].state) + '°C';
                  return `<span>${stateValue.split('').map((char, index) => `<span style="display: inline-block; animation: textfadeintro 1s both; animation-delay: ${1.3 + index * 0.1}s;">${char}</span>`).join('')}</span>`;
                ]]]
              icon1:
                card:
                  type: custom:button-card
                  tap_action:
                    action: navigate
                    navigation_path: '#lights_room02'
                    haptic: success
                  show_icon: true
                  icon: |
                    [[[ 
                      return (states['light.room_02'].state === 'on') 
                              ? 'hue:bulb-classic' 
                              : 'hue:bulb-classic-off'; 
                    ]]]
                  styles:
                    card:
                      - border-radius: 50%
                      - background: |
                          [[[
                            if (states['light.room_02'].state === 'on') {
                              const color = states['light.room_02'].attributes.rgb_color || [255, 255, 255];
                              return `linear-gradient(135deg, rgba(${color[0]}, ${color[1]}, ${color[2]}, 0.7) 0%, rgba(${color[0]}, ${color[1]}, ${color[2]}, 1) 100%)`;
                            } else {
                              const contrast6 = getComputedStyle(document.documentElement).getPropertyValue('--contrast6-rgb') || '200, 200, 200';
                              const contrast2 = getComputedStyle(document.documentElement).getPropertyValue('--contrast2-rgb') || '100, 100, 100';
                              return `linear-gradient(135deg, rgba(${contrast6}, 0.7) 0%, rgba(${contrast2}, 1) 100%)`;
                            }
                          ]]]
                      - width: calc(var(--card-size) * 0.192)
                      - height: calc(var(--card-size) * 0.192)
                      - box-shadow: none
                      - border: none
                    icon:
                      - width: calc(var(--card-size) * 0.096)
                      - height: calc(var(--card-size) * 0.096)
                      - color: var(--primary-text-color, rgb(255, 255, 255))
                      - opacity: |
                          [[[
                            return (states['light.room_02'].state === 'on') ? '1' : '0.2';
                          ]]]
              icon2:
                card:
                  type: custom:button-card
                  show_icon: true
                  styles:
                    card:
                      - border-radius: 50%
                      - background: >-
                          linear-gradient(45deg, rgba(253,125,90,1),
                          rgba(253,172,90,1))
                      - width: calc(var(--card-size) * 0.192)
                      - height: calc(var(--card-size) * 0.192)
                      - box-shadow: none
                      - border: none
                    icon:
                      - width: calc(var(--card-size) * 0.096)
                      - height: calc(var(--card-size) * 0.096)
                      - color: var(--primary-text-color, rgb(255, 255, 255))
                      - opacity: 0.9
              icon3:
                card:
                  type: custom:button-card
                  show_icon: true
                  icon: |
                    [[[ 
                      return (states['cover.blinds_right_cover'].attributes.current_position <= 20 && 
                              states['cover.blinds_left_cover'].attributes.current_position <= 20) 
                              ? 'phu:ikea-blind-closed' 
                              : 'phu:ikea-blind-open'; 
                    ]]]         
                  show_name: false
                  tap_action:
                    action: call-service
                    service: |
                      [[[ 
                        const left_blind = 'cover.blinds_left_cover';
                        const right_blind = 'cover.blinds_right_cover';
                        
                        if (!states[left_blind] || !states[right_blind]) {
                          return 'persistent_notification.create';
                        }
                        
                        const left_position = states[left_blind].attributes.current_position || 0;
                        const right_position = states[right_blind].attributes.current_position || 0;

                        if (states[left_blind].state === 'opening' || states[left_blind].state === 'closing' ||
                            states[right_blind].state === 'opening' || states[right_blind].state === 'closing') {
                          return 'cover.stop_cover';
                        }
                        
                        return (left_position < 50 || right_position < 50) ? 'cover.open_cover' : 'cover.close_cover';
                      ]]]
                    service_data:
                      entity_id:
                        - cover.blinds_left_cover
                        - cover.blinds_right_cover
                  styles:
                    card:
                      - border-radius: 50%
                      - background: >-
                          linear-gradient(135deg, rgba(90, 159, 248, 1) 0%,
                          rgba(42, 104, 236, 1) 100%)
                      - width: calc(var(--card-size) * 0.192)
                      - height: calc(var(--card-size) * 0.192)
                      - box-shadow: none
                      - border: none
                    icon:
                      - width: calc(var(--card-size) * 0.096)
                      - height: calc(var(--card-size) * 0.096)
                      - color: var(--primary-text-color, rgb(255, 255, 255))
                      - opacity: 0.9
            styles:
              grid:
                - grid-template-areas: '"n btn" "state btn" "i btn"'
                - grid-template-columns: 1fr min-content
                - grid-template-rows: min-content min-content min-content 1fr
              card:
                - '--card-size': 230px
                - height: var(--card-size)
                - width: var(--card-size)
                - padding: >-
                    calc(var(--card-size) * 0.088) calc(var(--card-size) *
                    0.032) calc(var(--card-size) * 0.088)
                    calc(var(--card-size) * 0.088)
                - background: var(--card-background-color, rgba(255, 255, 255, 0.9))
                - animation: cardpopintro 1s 0.3s both
                - border: none
                - box-shadow: none
              custom_fields:
                state:
                  - grid-area: state
                  - justify-self: start
                  - align-self: start
                  - width: 100%
                  - text-align: left
                  - display: block
                  - font-size: calc(var(--card-size) * 0.05)
                  - opacity: '0.7'
                  - padding-top: calc(var(--card-size) * 0.008)
                icon1:
                  - position: absolute
                  - top: calc(var(--card-size) * 0.1)
                  - right: calc(var(--card-size) * 0.032)
                  - animation: cardpopintro 1s 0.8s both
                icon2:
                  - position: absolute
                  - top: calc(var(--card-size) * 0.35)
                  - right: calc(var(--card-size) * 0.032)
                  - animation: cardpopintro 1s 0.9s both
                icon3:
                  - position: absolute
                  - top: calc(var(--card-size) * 0.6)
                  - right: calc(var(--card-size) * 0.032)
                  - animation: cardpopintro 1s 1s both
              name:
                - grid-area: 'n'
                - font-size: calc(var(--card-size) * 0.072)
                - font-weight: 500
                - justify-self: start
                - align-self: start
                - width: 100%
                - text-align: left
                - display: block
              img_cell:
                - grid-area: i
                - justify-content: start
                - position: absolute
                - width: calc(var(--card-size) * 0.72)
                - height: calc(var(--card-size) * 0.72)
                - left: '-2%'
                - bottom: '-4%'
                - margin: >-
                    0 0 calc(var(--card-size) * -0.08) calc(var(--card-size)
                    * -0.08)
                - background: var(--contrast3, rgba(200, 200, 200, 0.9))
                - opacity: '0.8'
                - border-radius: 50%
                - animation: cardpopintro 0.4s 0.6s both
              icon:
                - position: relative
                - width: calc(var(--card-size) * 0.4)
                - color: var(--contrast20, rgba(5, 5, 5, 1))
                - opacity: '0.2'
                - animation: cardpopintro 0.8s 0.8s both
            extra_styles: |
              @keyframes bgpopintro { 
                0% { transform: scale(0); }
              }

              @keyframes cardpopintro {
                0% { transform: scale(0); }
                50% { transform: scale(1.05); }
                100% { transform: scale(1); }
              }

              @keyframes slide {
                0% {transform: translateX(-3%); opacity: 0;}
                100% {transform: translateX(0%); opacity: 1;}
              }

              @keyframes textfadeintro {
                from { transform: scaleX(0.2) translateX(100px); filter: blur(20px); opacity: 0; }
                to { transform: scaleX(1) translateX(0); filter: blur(0); opacity: 1; }
              }
            card_mod:
              style: |
                :host {
                  display: block;
                  margin-left: auto;
                  margin-right: auto;
                }
          - type: custom:button-card
            styles:
              card:
                - background: none
                - box-shadow: none
                - border: none
                - height: 1px
                - width: 10px
          - type: custom:mod-card
            card_mod:
              style: |
                @keyframes rotateintro {
                  0% {
                    opacity: 0;
                    filter: blur(3px);
                    transform: scale(0.8) rotate(-90deg);
                  }
                  100% {
                    opacity: 1;
                    transform: scale(1) rotate(0deg);
                  }
                }
                ha-card {
                  animation: rotateintro 1s cubic-bezier(0.35, 1.7, 0.45, 0.9) 0.8s forwards;
                  opacity: 0;
                }
            card:
              type: grid
              cards:
                - type: conditional
                  conditions:
                    - condition: or
                      conditions:
                        - condition: state
                          entity: weather.pirateweather
                          state: hail
                        - condition: state
                          entity: weather.pirateweather
                          state: lightning-rainy
                        - condition: state
                          entity: weather.pirateweather
                          state: lightning
                        - condition: state
                          entity: weather.pirateweather
                          state: pouring
                        - condition: state
                          entity: weather.pirateweather
                          state: rainy
                        - condition: state
                          entity: weather.pirateweather
                          state: snowy-rainy
                  card:
                    type: custom:button-card
                    styles:
                      card:
                        - margin-top: 20px
                        - margin-right: 20px
                        - width: 325
                        - height: 325
                        - padding: 30px
                        - border-radius: 10px
                        - display: flex
                        - align-items: center
                        - justify-content: center
                        - background: none
                        - box-shadow: none
                        - overflow: visible
                      custom_fields:
                        icon:
                          - width: 100%
                          - height: 100%
                          - display: flex
                          - align-items: center
                          - justify-content: center
                          - background: transparent
                          - overflow: visible
                    custom_fields:
                      icon: |
                        <style>
                          @import url('https://fonts.googleapis.com/css?family=Work+Sans:200');
                          .icon {
                            display: block;
                            position: relative;
                            font-size: 5em;
                            width: 1em;
                            height: 1em;
                            border-radius: 50%;
                            background: linear-gradient(to var(--blend-dir), var(--blend1) var(--blend-from), var(--blend2) var(--blend-to));
                            --shadow: #34c6d8;
                            --ring: currentColor;
                            --blend1: #3d5980;
                            --blend2: #5c737f;
                            --blend-from: 0%;
                            --blend-to: 100%;
                            --blend-dir: top right;
                            box-shadow: 0 0 .3em -.03em var(--shadow);
                          }
                          .icon::after {
                            content: attr(data-label);
                            position: absolute;
                            top: calc(100% + 1vmin);
                            left: 50%;
                            transform: translateX(-50%);
                            font: inherit;
                            font-size: .15em;
                          }
                          .cloud {
                            position: absolute;
                            top: 20%;
                            left: 50%;
                            transform: translate(-50%, -50%);
                            width: .37em;
                            height: .13em;
                            border-radius: .1em;
                            background-color: #A7A7A7;
                            box-shadow: 0 0 .1em .02em '#5A5A5A' inset, 0 0 .3em -.03em var(--shadow);
                            animation: move 3000ms infinite ease-in-out;
                          }
                          .cloud + .cloud {
                            top: 40%;
                            left: 65%;
                            animation: move 3700ms infinite linear;
                          }
                          .cloud::before,
                          .cloud::after {
                            content: '';
                            position: inherit;
                            border-radius: inherit;
                            background-color: inherit;
                            box-shadow: inherit;
                            bottom: 30%;
                          }
                          .cloud::before {
                            left: .05em;
                            width: .2em;
                            height: .2em;
                          }
                          .cloud::after {
                            left: .15em;
                            width: .15em;
                            height: .15em;
                          }
                          ul {
                            position: absolute;
                            list-style: none;
                            top: 0%;
                            left: 10%;
                            right: 0%;
                            height: 100%;
                            margin: 0;
                            padding: 0;
                          }
                          li::before,
                          li::after {
                            content: '';
                            position: absolute;
                            list-style: none;
                            width: .015em;
                            height: .01em;
                            border-radius: 100%;
                            background-color: var(--ring);
                            will-change: transform, opacity;
                            animation: snow 3700ms infinite ease-out;
                            opacity: 0;
                          }
                          li:nth-child(2n+1)::before,
                          li:nth-child(13n+11)::after {
                            top: -7%;
                            left: 40%;
                          }
                          li:nth-child(3n+2)::before,
                          li:nth-child(11n+7)::after {
                            top: 5%;
                            left: 90%;
                            animation-delay: 1000ms;
                          }
                          li:nth-child(5n+3)::before,
                          li:nth-child(7n+5)::after {
                            top: -10%;
                            left: 80%;
                            animation-delay: 2000ms;
                          }
                          li:nth-child(7n+5)::before,
                          li:nth-child(5n+3)::after {
                            top: 10%;
                            left: 10%;
                            animation-delay: 1300ms;
                          }
                          li:nth-child(11n+7)::before,
                          li:nth-child(3n+2)::after {
                            top: 20%;
                            left: 70%;
                            animation-delay: 1500ms;
                          }
                          li:nth-child(13n+11)::before,
                          li:nth-child(2n+1)::after {
                            top: 35%;
                            left: 20%;
                            animation-delay: 500ms;
                          }
                          @keyframes move {
                            50% {transform: translateX(-.05em);}
                          }
                          @keyframes snow {
                            50% {opacity: 1;}
                            100% {transform: translate(-.1em, 15vmin);}
                          }
                        </style>
                        <div class="icon" icon="stormy">
                          <span class="cloud"></span>
                          <span class="cloud"></span>
                          <ul>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                          </ul>
                        </div>
                    entity: weather.pirateweather

                - type: conditional
                  conditions:
                    - condition: or
                      conditions:
                        - condition: state
                          entity: weather.pirateweather
                          state: cloudy
                        - condition: state
                          entity: weather.pirateweather
                          state: partlycloudy
                        - condition: state
                          entity: weather.pirateweather
                          state: fog
                        - condition: state
                          entity: weather.pirateweather
                          state: windy-variant
                        - condition: state
                          entity: weather.pirateweather
                          state: windy
                  card:
                    type: custom:button-card
                    styles:
                      card:
                        - margin-top: 20px
                        - margin-right: 20px
                        - width: 325
                        - height: 325
                        - padding: 30px
                        - border-radius: 10px
                        - display: flex
                        - align-items: center
                        - justify-content: center
                        - background: none
                        - box-shadow: none
                        - overflow: visible
                      custom_fields:
                        icon:
                          - width: 100%
                          - height: 100%
                          - display: flex
                          - align-items: center
                          - justify-content: center
                          - background: transparent
                          - overflow: visible
                    custom_fields:
                      icon: |
                        <style>
                          @import url('https://fonts.googleapis.com/css?family=Work+Sans:200');
                          .icon {
                            display: block;
                            position: relative;
                            font-size: 5em;
                            width: 1em;
                            height: 1em;
                            border-radius: 50%;
                            background: linear-gradient(to var(--blend-dir), var(--blend1) var(--blend-from), var(--blend2) var(--blend-to));
                            --shadow: #1378bb;
                            --ring: currentColor;
                            --blend1: #1b9ce2;
                            --blend2: #1378bb;
                            --blend-from: 0%;
                            --blend-to: 65%;
                            --blend-dir: top right;
                            box-shadow: 0 0 .3em -.03em var(--shadow);
                          }
                          .icon::after {
                            content: attr(data-label);
                            position: absolute;
                            top: calc(100% + 1vmin);
                            left: 50%;
                            transform: translateX(-50%);
                            font: inherit;
                            font-size: .15em;
                          }
                          .cloud {
                            position: absolute;
                            top: .1em;
                            left: 65%;
                            width: .37em;
                            height: .13em;
                            border-radius: .1em;
                            background-color: #fff;
                            box-shadow: 0 0 .1em .02em var(--ring) inset, 0 0 .3em -.03em var(--shadow);
                            animation: move 3000ms infinite ease-in-out;
                          }
                          .cloud + .cloud {
                            top: 25%;
                            left: 40%;
                            animation: move 3700ms infinite linear;
                          }
                          .cloud::before,
                          .cloud::after {
                            content: '';
                            position: inherit;
                            border-radius: inherit;
                            background-color: inherit;
                            box-shadow: inherit;
                            bottom: 30%;
                          }
                          .cloud::before {
                            left: .05em;
                            width: .2em;
                            height: .2em;
                          }
                          .cloud::after {
                            left: .15em;
                            width: .15em;
                            height: .15em;
                          }
                          @keyframes move {
                            50% {transform: translateX(-.05em);}
                          }
                        </style>
                        <div class="icon" icon="cloudy">
                          <span class="cloud"></span>
                          <span class="cloud"></span>
                        </div>
                    entity: weather.pirateweather
                - type: conditional
                  conditions:
                    - condition: or
                      conditions:
                        - condition: state
                          entity: weather.pirateweather
                          state: sunny
                  card:
                    type: custom:button-card
                    styles:
                      card:
                        - margin-top: 20px
                        - margin-right: 20px
                        - width: 325
                        - height: 325
                        - padding: 30px
                        - border-radius: 10px
                        - display: flex
                        - align-items: center
                        - justify-content: center
                        - background: none
                        - box-shadow: none
                        - overflow: visible
                      custom_fields:
                        icon:
                          - width: 100%
                          - height: 100%
                          - display: flex
                          - align-items: center
                          - justify-content: center
                          - background: transparent
                          - overflow: visible
                    custom_fields:
                      icon: |
                        <style>
                          @import url('https://fonts.googleapis.com/css?family=Work+Sans:200');
                          .icon {
                            display: block;
                            position: relative;
                            font-size: 5em;
                            width: 1em;
                            height: 1em;
                            border-radius: 50%;
                            background: radial-gradient(circle, var(--blend1) 0%, var(--blend2) 65%, rgba(0,0,0,0) 70%);
                            --shadow: #fd6f21;
                            --ring: currentColor;
                            --blend1: #fc5830;
                            --blend2: #f98c24;
                            --blend-from: 0%;
                            --blend-to: 65%;
                            --blend-dir: top right;
                            overflow: visible;
                          }
                          .icon::after {
                            content: attr(data-label);
                            position: absolute;
                            top: calc(100% + 1vmin);
                            left: 50%;
                            transform: translateX(-50%);
                            font: inherit;
                            font-size: .15em;
                          }
                          .sun {
                            position: absolute;
                            top: 20%;
                            left: 80%;
                            transform: translate(-50%, -50%);
                            width: 40%;
                            height: 40%;
                            border-radius: 50%;
                            background: #ffeb3b;
                            box-shadow: 0 0 0 .02em var(--ring) inset, 0 0 .3em -.03em var(--shadow);
                            transform-origin: .1em .1em;
                          }
                          .sun::after {
                            content: '';
                            position: absolute;
                            top: .1em;
                            left: 0;
                            will-change: transform;
                            transform: translate(-50%, -50%);
                            width: .1em;
                            height: .1em;
                            border-radius: 50%;
                            background: rgba(255, 255, 255, .1);
                            box-shadow: 0 0 .1em 0 rgba(255, 255, 255, .3) inset, -.1em -.1em 0 .2em rgba(255, 255, 255, .1);
                            animation: flare 12000ms infinite alternate linear;
                          }
                          @keyframes flare {
                            to {transform: translate(-.3em, .3em); opacity: .4; font-size: .2em;}
                          }
                        </style>
                        <div class="icon" icon="sunny">
                          <span class="sun"></span>
                        </div>
                    entity: weather.pirateweather

                - type: conditional
                  conditions:
                    - condition: state
                      entity: weather.pirateweather
                      state: clear-night
                  card:
                    type: custom:button-card
                    styles:
                      card:
                        - margin-top: 20px
                        - margin-right: 20px
                        - width: 325
                        - height: 325
                        - padding: 30px
                        - display: flex
                        - align-items: center
                        - justify-content: center
                        - background: none
                        - box-shadow: none
                        - overflow: visible
                      custom_fields:
                        icon:
                          - width: 100%
                          - height: 100%
                          - display: flex
                          - align-items: center
                          - justify-content: center
                          - background: transparent
                          - overflow: visible
                    custom_fields:
                      icon: |
                        <style>
                          @import url('https://fonts.googleapis.com/css?family=Work+Sans:200');
                          .icon {
                            display: block;
                            position: relative;
                            font-size: 5em;
                            width: 1em;
                            height: 1em;
                            border-radius: 50%;
                            background: radial-gradient(circle, var(--blend1) 0%, var(--blend2) 65%, rgba(0,0,0,0) 70%);
                            --shadow: #5133a5;
                            --ring: currentColor;
                            --blend1: #4054b2;
                            --blend2: #aa4cba;
                            --blend-from: 0%;
                            --blend-to: 65%;
                            --blend-dir: bottom right;
                            overflow: visible;
                          }
                          .icon::after {
                            content: attr(data-label);
                            position: absolute;
                            top: calc(100% + 1vmin);
                            left: 50%;
                            transform: translateX(-50%);
                            font: inherit;
                            font-size: .15em;
                          }
                          [icon="supermoon"]::before {
                            content: '';
                            position: absolute;
                            top: 0;
                            left: 0;
                            right: 0;
                            bottom: 0;
                            background-image: 
                              radial-gradient(1px 1px at 50% 20%, #fff, rgba(0,0,0,0)),
                              radial-gradient(1px 1px at 30% 65%, #fff, rgba(0,0,0,0)),
                              radial-gradient(2px 2px at 15% 05%, #fff, rgba(0,0,0,0)),
                              radial-gradient(2px 2px at 37% 35%, #fff, rgba(0,0,0,0)),
                              radial-gradient(2px 2px at 65% 47%, #fff, rgba(0,0,0,0)),
                              radial-gradient(1px 1px at 42% 29%, #fff, rgba(0,0,0,0)),
                              radial-gradient(1px 1px at 73% 56%, #fff, rgba(0,0,0,0)),
                              radial-gradient(1px 1px at 24% 19%, #fff, rgba(0,0,0,0)),
                              radial-gradient(2px 2px at 31% 47%, #fff, rgba(0,0,0,0)),
                              radial-gradient(1px 1px at 18% 39%, #fff, rgba(0,0,0,0));
                            background-repeat: repeat;
                            will-change: transform;
                            animation: revolve 120000ms linear infinite;
                          }
                          .moon {
                            position: absolute;
                            top: 20%;
                            left: 80%;
                            transform: translate(-50%, -50%);
                            width: 40%;
                            height: 40%;
                            border-radius: 100%;
                            background: radial-gradient(circle at bottom left, var(--ring), #fef07e);
                            box-shadow: 0 0 0 .02em var(--ring) inset, 0 0 .3em -.03em var(--blend2);
                          }
                          .moon::before,
                          .moon::after {
                            content: '';
                            position: absolute;
                            border-radius: 100%;
                            background-color: var(--blend1);
                            box-shadow: .01em .01em .1em 0 var(--blend1);
                          }
                          .moon::before {
                            top: 15%;
                            left: 55%;
                            width: 20%;
                            height: 20%;
                            opacity: .3;
                          }
                          .moon::after {
                            bottom: 50%;
                            left: 25%;
                            width: 15%;
                            height: 15%;
                            opacity: .2;
                          }
                          .meteor {
                            position: absolute;
                            background-color: #fff;
                            opacity: 0;
                            top: 20%;
                            left: 55%;
                            width: 1px;
                            height: 15px;
                            transform: rotate(45deg);
                            will-change: transform, opacity;
                            animation: meteor 6250ms infinite ease-in;
                          }
                          @keyframes revolve {
                            to {transform: rotate(360deg);}
                          }
                          @keyframes meteor {
                            5% {opacity: 1;}
                            8% {transform: translate(-.6em, .6em) rotate(45deg); opacity: 0;}
                          }
                        </style>
                        <div class="icon" icon="supermoon">
                          <span class="moon"></span>
                          <span class="meteor"></span>
                        </div>
                    entity: weather.pirateweather



                - type: conditional
                  conditions:
                    - condition: or
                      conditions:
                        - condition: state
                          entity: weather.pirateweather
                          state: snowy
                  card:
                    type: custom:button-card
                    styles:
                      card:
                        - margin-top: 20px
                        - margin-right: 20px
                        - width: 325
                        - height: 325
                        - padding: 30px
                        - border-radius: 10px
                        - display: flex
                        - align-items: center
                        - justify-content: center
                        - background: none
                        - box-shadow: none
                        - overflow: visible
                      custom_fields:
                        icon:
                          - width: 100%
                          - height: 100%
                          - display: flex
                          - align-items: center
                          - justify-content: center
                          - background: transparent
                          - overflow: visible
                    custom_fields:
                      icon: |
                        <style>
                          @import url('https://fonts.googleapis.com/css?family=Work+Sans:200');
                          .icon {
                            display: block;
                            position: relative;
                            font-size: 5em;
                            width: 1em;
                            height: 1em;
                            border-radius: 50%;
                            background: linear-gradient(to var(--blend-dir), var(--blend1) var(--blend-from), var(--blend2) var(--blend-to));
                            --shadow: #c9e8de;
                            --ring: currentColor;
                            --blend1: #758595;
                            --blend2: #e0e2e5;
                            --blend-from: 0%;
                            --blend-to: 90%;
                            --blend-dir: bottom left;
                            box-shadow: 0 0 .3em -.03em var(--shadow);
                          }
                          .icon::after {
                            content: attr(data-label);
                            position: absolute;
                            top: calc(100% + 1vmin);
                            left: 50%;
                            transform: translateX(-50%);
                            font: inherit;
                            font-size: .15em;
                          }
                          ul {
                            position: absolute;
                            list-style: none;
                            top: 0%;
                            left: 10%;
                            right: 0%;
                            height: 100%;
                            margin: 0;
                            padding: 0;
                          }
                          li::before,
                          li::after {
                            content: '';
                            position: absolute;
                            list-style: none;
                            width: .015em;
                            height: .01em;
                            border-radius: 100%;
                            background-color: var(--ring);
                            will-change: transform, opacity;
                            animation: snow 3700ms infinite ease-out;
                            opacity: 0;
                          }
                          li:nth-child(2n+1)::before,
                          li:nth-child(13n+11)::after {
                            top: -7%;
                            left: 40%;
                          }
                          li:nth-child(3n+2)::before,
                          li:nth-child(11n+7)::after {
                            top: 5%;
                            left: 90%;
                            animation-delay: 1000ms;
                          }
                          li:nth-child(5n+3)::before,
                          li:nth-child(7n+5)::after {
                            top: -10%;
                            left: 80%;
                            animation-delay: 2000ms;
                          }
                          li:nth-child(7n+5)::before,
                          li:nth-child(5n+3)::after {
                            top: 10%;
                            left: 10%;
                            animation-delay: 1300ms;
                          }
                          li:nth-child(11n+7)::before,
                          li:nth-child(3n+2)::after {
                            top: 20%;
                            left: 70%;
                            animation-delay: 1500ms;
                          }
                          li:nth-child(13n+11)::before,
                          li:nth-child(2n+1)::after {
                            top: 35%;
                            left: 20%;
                            animation-delay: 500ms;
                          }
                          .snowman {
                            position: absolute;
                            bottom: 30%;
                            left: 40%;
                            width: .15em;
                            height: .15em;
                            opacity: .9;
                            background: var(--ring);
                            border-radius: 100%;
                          }
                          .snowman::after {
                            content: '';
                            position: absolute;
                            top: 90%;
                            left: 30%;
                            transform: translate(-50%, 0%);
                            width: .275em;
                            height: .3em;
                            border-radius: inherit;
                            background-color: var(--ring);
                          }
                          .snowman::before {
                            content: '';
                            position: absolute;
                            top: 0%;
                            left: 50%;
                            transform: translate(-55%, -50%);
                            width: .45em;
                            height: .4em;
                            border-radius: 60%;
                            border: .02em solid transparent;
                            border-bottom-color: var(--blend1);
                            will-change: border-radius;
                            animation: snowman 9000ms infinite ease-in;
                          }
                          @keyframes snow {
                            50% {opacity: 1;}
                            100% {transform: translate(-.1em, 15vmin);}
                          }
                          @keyframes snowman {
                            50% {border-radius: 60% 60% 30% 50%;}
                          }
                        </style>
                        <div class="icon" icon="snowy">
                          <span class="snowman"></span>
                          <ul>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                            <li></li>
                          </ul>
                        </div>
                    entity: weather.pirateweather
              columns: 5



          - type: custom:button-card
            template: animated_category_card
            variables:
              icon: fapro:solar_chair_2_bold_9
              name: Office
              index: 2
            tap_action:
              action: navigate
              navigation_path: /dashboard-home/office
              haptic: success
          - type: custom:button-card
            template: animated_category_card
            variables:
              icon: hue:room-toilet
              name: Bathroom
              index: 3
            tap_action:
              action: navigate
              navigation_path: /dashboard-home/bathroom
              haptic: success
          - type: custom:button-card
            template: animated_category_card
            variables:
              icon: bha:stairs
              name: Hallway
              index: 4
            tap_action:
              action: navigate
              navigation_path: /dashboard-home/hallway
              haptic: success
          - type: custom:button-card
            template: animated_category_card
            variables:
              icon: fapro:duotone_plug_circle_bolt
              name: Power
              navigation_path: /energy
              index: 2
            tap_action:
              action: navigate
              navigation_path: /energy
              haptic: success
          - type: custom:button-card
            template: animated_category_card
            variables:
              icon: fapro:solar_network
              name: Network
              navigation_path: /dashboard-home/network
              index: 3
            tap_action:
              action: navigate
              navigation_path: /dashboard-home/network
              haptic: success
          - type: custom:button-card
            template: animated_category_card
            variables:
              icon: fapro:solar_shield1
              name: Security
              navigation_path: /dashboard-home/security
              index: 4
            tap_action:
              action: navigate
              navigation_path: /dashboard-home/security
              haptic: success
          - type: custom:button-card
            template: animated_category_card
            variables:
              icon: fapro:solar_widget_3
              name: Settings
              index: 3
            tap_action:
              toggle_menu: >
                [[[ this.dispatchEvent(new Event('hass-toggle-menu', {
                bubbles: true,
                      composed: true })); ]]]
              haptic: success
          - type: custom:button-card
            template: animated_category_card
            variables:
              icon: fapro:solar_cart_large_2_bold_11
              name: Shopping
              navigation_path: /dashboard-home/shopping
              index: 4
            tap_action:
              action: navigate
              navigation_path: /dashboard-home/shopping
              haptic: success
          - type: custom:button-card
            template: animated_category_card
            variables:
              icon: fapro:places_pet_store
              name: Pets
              navigation_path: /dashboard-home/pets
              index: 5
            tap_action:
              action: navigate
              navigation_path: /dashboard-home/pets
              haptic: success
        columns: 3
      - type: vertical-stack
        cards:
          - type: custom:bubble-card
            card_type: pop-up
            hash: '#lights_room02'
            styles: |-
              .bubble-header-container {
                flex-direction: row-reverse; /* Swap close button position */
              }
              .bubble-header {
                margin: 0 0 0 14px !important; /* Swap close button position */
              }
              .name {
                color: var(--contrast20, var(--primary-text-color, rgba(255, 255, 255, 0.9))) !important;
                font-size: 0.85em !important;
                font-weight: 300 !important;
                letter-spacing: 1.5px !important;
                font-family: Ubuntu, sans-serif;

              }
              .bubble-button-card-container {
                background: var(--contrast3, var(--primary-background-color, rgba(255, 255, 255, 0.2))) !important;
              }
              .bubble-sub-button-1 {
                opacity: 0.5 !important;
              }        
            name: All bedroom lights
            icon: fapro:solar_power
            show_last_changed: false
            show_attribute: false
            show_name: true
            show_state: false
            trigger_state: 'on'
            trigger_close: false
            show_header: true
            button_type: slider
            entity: light.room_02
            scrolling_effect: false
            show_icon: true
            sub_button:
              - entity: light.room_02
                icon: mdi:dots-vertical
                show_background: false
                show_state: false
                show_last_changed: false
                show_attribute: false
                show_icon: true
            use_accent_color: false
          - type: custom:mod-card
            style: |

              ha-card {
                margin: 20px;
                 
                background: transparent;
                position: center;
                --swiper-pagination-bottom: 18px;    
              }
            card:
              type: custom:swipe-card
              parameters:
                watchOverflow: true
                slideToClickedSlide: true
                centeredSlides: false
                preloadImages: true
                preventInteractionOnTransition: true
                mousewheel: true
                spaceBetween: 25
                initialSlide: 0
                slidesPerView: 1
                loop: true
              cards:
                - type: custom:paper-buttons-row
                  base_config:
                    name: false
                    styles:
                      icon:
                        height: 64px;
                        width: 64px;
                        box-shadow: 0 0 0.7rem 0.08rem var(--contrast6)
                        opacity: 83%
                        border-radius: 50%
                        border: solid 0.3px var(--contrast5)
                  buttons:
                    - entity: scene.room_02_adrift
                      image: /local/hue/adrift.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_adrift
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_amber_bloom
                      image: /local/hue/amber_bloom.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_amber_bloom
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_amethyst_valley
                      image: /local/hue/amethyst_valley.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_amethyst_valley
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_arctic_aurora
                      image: /local/hue/arctic_aurora.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_arctic_aurora
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                - type: custom:paper-buttons-row
                  base_config:
                    name: false
                    styles:
                      icon:
                        height: 64px;
                        width: 64px;
                        box-shadow: 0 0 0.7rem 0.08rem var(--contrast6)
                        opacity: 83%
                        border-radius: 50%
                        border: solid 0.3px var(--contrast5)
                  buttons:
                    - entity: scene.room_02_beginnings
                      image: /local/hue/beginnings.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_beginnings
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_blood_moon
                      image: /local/hue/blood_moon.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_blood_moon
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_blossom
                      image: /local/hue/blossom.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_blossom
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_blue_lagoon
                      image: /local/hue/blue_lagoon.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_blue_lagoon
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                - type: custom:paper-buttons-row
                  base_config:
                    name: false
                    styles:
                      icon:
                        height: 64px;
                        width: 64px;
                        box-shadow: 0 0 0.7rem 0.08rem var(--contrast6)
                        opacity: 83%
                        border-radius: 50%
                        border: solid 0.3px var(--contrast5)
                  buttons:
                    - entity: scene.room_02_blue_planet
                      image: /local/hue/blue_planet.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_blue_planet
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_cancun
                      image: /local/hue/cancun.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_cancun
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_crocus
                      image: /local/hue/crocus.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_crocus
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_dreamy_dusk
                      image: /local/hue/dreamy_dusk.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_dreamy_dusk
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                - type: custom:paper-buttons-row
                  base_config:
                    name: false
                    styles:
                      icon:
                        height: 64px;
                        width: 64px;
                        box-shadow: 0 0 0.7rem 0.08rem var(--contrast6)
                        opacity: 83%
                        border-radius: 50%
                        border: solid 0.3px var(--contrast5)
                  buttons:
                    - entity: scene.room_02_emerald_flutter
                      image: /local/hue/emerald_flutter.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_emerald_flutter
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_emerald_isle
                      image: /local/hue/emerald_isle.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_emerald_isle
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_first_light
                      image: /local/hue/first_light.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_first_light
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_frosty_dawn
                      image: /local/hue/frosty_dawn.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_frosty_dawn
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                - type: custom:paper-buttons-row
                  base_config:
                    name: false
                    styles:
                      icon:
                        height: 64px;
                        width: 64px;
                        box-shadow: 0 0 0.7rem 0.08rem var(--contrast6)
                        opacity: 83%
                        border-radius: 50%
                        border: solid 0.3px var(--contrast5)
                  buttons:
                    - entity: scene.room_02_galaxy
                      image: /local/hue/galaxy.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_galaxy
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_golden_pond
                      image: /local/hue/golden_pond.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_golden_pond
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_honolulu
                      image: /local/hue/honolulu.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_honolulu
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_horizon
                      image: /local/hue/horizon.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_horizon
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                - type: custom:paper-buttons-row
                  base_config:
                    name: false
                    styles:
                      icon:
                        height: 64px;
                        width: 64px;
                        box-shadow: 0 0 0.7rem 0.08rem var(--contrast6)
                        opacity: 83%
                        border-radius: 50%
                        border: solid 0.3px var(--contrast5)
                  buttons:
                    - entity: scene.room_02_ibiza
                      image: /local/hue/ibiza.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_ibiza
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_lake_mist
                      image: /local/hue/lake_mist.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_lake_mist
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_lake_placid
                      image: /local/hue/lake_placid.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_lake_placid
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_lily
                      image: /local/hue/lily.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_lily
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                - type: custom:paper-buttons-row
                  base_config:
                    name: false
                    styles:
                      icon:
                        height: 64px;
                        width: 64px;
                        box-shadow: 0 0 0.7rem 0.08rem var(--contrast6)
                        opacity: 83%
                        border-radius: 50%
                        border: solid 0.3px var(--contrast5)
                  buttons:
                    - entity: scene.room_02_magneto
                      image: /local/hue/magento.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_magneto
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_majestic_morning
                      image: /local/hue/majestic_morning.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_majestic_morning
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_memento
                      image: /local/hue/memento.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_memento
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_meriete
                      image: /local/hue/meriete.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_meriete
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                - type: custom:paper-buttons-row
                  base_config:
                    name: false
                    styles:
                      icon:
                        height: 64px;
                        width: 64px;
                        box-shadow: 0 0 0.7rem 0.08rem var(--contrast6)
                        opacity: 83%
                        border-radius: 50%
                        border: solid 0.3px var(--contrast5)
                  buttons:
                    - entity: scene.room_02_midwinter
                      image: /local/hue/midwinter.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_midwinter
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_misty_ridge
                      image: /local/hue/misty_ridge.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_misty_ridge
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_moonlight
                      image: /local/hue/moonlight.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_moonlight
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_mountain_breeze
                      image: /local/hue/mountain_breeze.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_mountain_breeze
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                - type: custom:paper-buttons-row
                  base_config:
                    name: false
                    styles:
                      icon:
                        height: 64px;
                        width: 64px;
                        box-shadow: 0 0 0.7rem 0.08rem var(--contrast6)
                        opacity: 83%
                        border-radius: 50%
                        border: solid 0.3px var(--contrast5)
                  buttons:
                    - entity: scene.room_02_narcissa
                      image: /local/hue/narcissa.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_narcissa
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_nebula
                      image: /local/hue/nebula.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_nebula
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_ocean_dawn
                      image: /local/hue/ocean_dawn.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_ocean_dawn
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_painted_sky
                      image: /local/hue/painted_sky.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_painted_sky
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                - type: custom:paper-buttons-row
                  base_config:
                    name: false
                    styles:
                      icon:
                        height: 64px;
                        width: 64px;
                        box-shadow: 0 0 0.7rem 0.08rem var(--contrast6)
                        opacity: 83%
                        border-radius: 50%
                        border: solid 0.3px var(--contrast5)
                  buttons:
                    - entity: scene.room_02_palm_beach
                      image: /local/hue/palm_beach.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_palm_beach
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_pensive
                      image: /local/hue/pensive.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_pensive
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_precious
                      image: /local/hue/precious.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_precious
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_resplendent
                      image: /local/hue/resplendent.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_resplendent
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                - type: custom:paper-buttons-row
                  base_config:
                    name: false
                    styles:
                      icon:
                        height: 64px;
                        width: 64px;
                        box-shadow: 0 0 0.7rem 0.08rem var(--contrast6)
                        opacity: 83%
                        border-radius: 50%
                        border: solid 0.3px var(--contrast5)
                  buttons:
                    - entity: scene.room_02_rolling_hills
                      image: /local/hue/rolling_hills.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_rolling_hills
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_ruby_glow
                      image: /local/hue/ruby_glow.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_ruby_glow
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_savanna_sunset
                      image: /local/hue/savanna_sunset.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_savanna_sunset
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_scarlet_dream
                      image: /local/hue/scarlet_dream.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_scarlet_dream
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                - type: custom:paper-buttons-row
                  base_config:
                    name: false
                    styles:
                      icon:
                        height: 64px;
                        width: 64px;
                        box-shadow: 0 0 0.7rem 0.08rem var(--contrast6)
                        opacity: 83%
                        border-radius: 50%
                        border: solid 0.3px var(--contrast5)
                  buttons:
                    - entity: scene.room_02_spring_blossom
                      image: /local/hue/spring_blossom.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_spring_blossom
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_starlight
                      image: /local/hue/starlight.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_starlight
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_still_waters
                      image: /local/hue/still_waters.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_still_waters
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_sunday_morning
                      image: /local/hue/sunday_morning.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_sunday_morning
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                - type: custom:paper-buttons-row
                  base_config:
                    name: false
                    styles:
                      icon:
                        height: 64px;
                        width: 64px;
                        box-shadow: 0 0 0.7rem 0.08rem var(--contrast6)
                        opacity: 83%
                        border-radius: 50%
                        border: solid 0.3px var(--contrast5)
                  buttons:
                    - entity: scene.room_02_sundown
                      image: /local/hue/sundown.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_sundown
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_sunflare
                      image: /local/hue/sunflare.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_sunflare
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_tokyo
                      image: /local/hue/tokyo.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_tokyo
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_tropical_twilight
                      image: /local/hue/tropical_twilight.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_tropical_twilight
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                - type: custom:paper-buttons-row
                  base_config:
                    name: false
                    styles:
                      icon:
                        height: 64px;
                        width: 64px;
                        box-shadow: 0 0 0.7rem 0.08rem var(--contrast6)
                        opacity: 83%
                        border-radius: 50%
                        border: solid 0.3px var(--contrast5)
                  buttons:
                    - entity: scene.room_02_valley_dawn
                      image: /local/hue/valley_dawn.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_valley_dawn
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_warm_embrace
                      image: /local/hue/warm_embrace.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_warm_embrace
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_tokyo
                      image: /local/hue/tokyo.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_tokyo
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_tropical_twilight
                      image: /local/hue/tropical_twilight.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_tropical_twilight
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                - type: custom:paper-buttons-row
                  base_config:
                    name: false
                    styles:
                      icon:
                        height: 64px;
                        width: 64px;
                        box-shadow: 0 0 0.7rem 0.08rem var(--contrast6)
                        opacity: 83%
                        border-radius: 50%
                        border: solid 0.3px var(--contrast5)
                  buttons:
                    - entity: scene.room_02_winter_beauty
                      image: /local/hue/winter_beauty.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_winter_beauty
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_winter_mountain
                      image: /local/hue/winter_mountain.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_winter_mountain
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
                    - entity: scene.room_02_rio
                      image: /local/hue/rio.png
                      tap_action:
                        haptic: success
                        action: call-service
                        service: hue.activate_scene
                        target:
                          entity_id: scene.room_02_rio
                        data:
                          dynamic: true
                          transition: 1
                      hold_action:
                        action: none
                      double_tap_action:
                        action: none
          - type: custom:bubble-card
            card_type: separator
            name: Lights
            card_layout: large
            styles: |
              .bubble-name {
                color: var(--contrast20, var(--primary-text-color, rgba(255, 255, 255, 0.9))) !important;
                font-size: 0.95em !important;
                font-weight: 400 !important;
                letter-spacing: 1.4px !important;
                padding-left: 12px;
                font-family: Ubuntu, sans-serif;
                text-transform: capitalize;             
              }
              .bubble-icon {
                display: none;
              }  
              .bubble-line {
                background-color: var(--contrast6, var(--divider-color, rgba(0, 0, 0, 0.1)));
                opacity: 1;
                height: 1px;
              }
              ha-card {
                margin-bottom: -2px !important;
              }
          - type: custom:auto-entities
            card:
              type: grid
              columns: 2
              square: false
            card_param: cards
            filter:
              include:
                - domain: light
                  area: bedroom_2
                  options:
                    type: custom:bubble-card
                    card_type: button
                    button_type: slider
                    columns: 2
                    rows: 2
                    show_name: true
                    show_attribute: false
                    attribute: brightness
                    styles: |
                      .name {
                        color: var(--contrast20, var(--primary-text-color, rgba(255, 255, 255, 0.9))) !important;
                        font-size: 0.85em !important;
                        font-weight: 300 !important;
                        letter-spacing: 1.5px !important;
                        text-transform: capitalize;                   
                      }
                      .bubble-button-card-container {
                        background: var(--contrast3, var(--primary-background-color, rgba(255, 255, 255, 0.2))) !important;
                      }
                      .bubble-sub-button-1 {
                        opacity: 0.25!important;
                      }
                    slider_live_update: false
                    card_layout: normal
                    sub_button:
                      - entity: this.entity_id
                        show_background: false
                        icon: mdi:dots-vertical
                    tap_action:
                      action: toggle
              exclude:
                - entity_id: light.room_02
                - entity_id: light.bedroom
                - entity_id: light.2nd_floor
                - attributes:
                    type: browser_mod
                - state: unavailable
                - entity_id: /dnd/
            show_empty: true
            sort:
              method: entity_id
              reverse: false
          - type: custom:gap-card
            height: 10
          - type: custom:bubble-card
            card_type: separator
            name: Offline
            card_layout: large
            styles: |
              .bubble-name {
                color: var(--contrast20, var(--primary-text-color, rgba(255, 255, 255, 0.9))) !important;
                font-size: 0.95em !important;
                font-weight: 400 !important;
                letter-spacing: 1.4px !important;
                padding-left: 12px;
                font-family: Ubuntu, sans-serif;
                text-transform: capitalize;               
              }
              .bubble-icon {
                display: none;
              }  
              .bubble-line {
                background-color: var(--contrast6, var(--divider-color, rgba(0, 0, 0, 0.1)));
                opacity: 1;
                height: 1px;
              }
              ha-card {
                margin-bottom: -2px !important;

              }
          - type: custom:auto-entities
            card:
              type: grid
              columns: 2
              square: false
            card_param: cards
            filter:
              include:
                - domain: light
                  area: bedroom_2
                  state: unavailable
                  options:
                    type: custom:bubble-card
                    card_type: button
                    button_type: slider
                    columns: 2
                    rows: 2
                    show_name: true
                    show_attribute: false
                    attribute: brightness
                    styles: |
                      .name {
                        color: var(--contrast16, var(--primary-text-color, rgba(255, 255, 255, 0.9))) !important;
                        font-size: 0.85em !important;
                        font-weight: 300 !important;
                        letter-spacing: 1.5px !important;
                        text-transform: capitalize;                   
                      }
                      .bubble-button-card-container {
                        background: var(--red-tint, var(--error-color, rgba(255, 0, 0, 0.3))) !important;
                      }
                      .bubble-icon {
                        color: var(--red, var(--primary-text-color, rgba(255, 0, 0, 0.9))) !important;
                      }         
                      .bubble-icon-container {
                        background-color: var(--red-tint, var(--error-color, rgba(255, 0, 0, 0.3)));
                        opacity: 0.5 !important;
                      }                
                      .bubble-sub-button-1 {
                        opacity: 0.2 !important;
                      }
                    slider_live_update: false
                    card_layout: normal
              exclude:
                - entity_id: light.room_02
                - entity_id: light.bedroom
                - entity_id: light.2nd_floor
                - attributes:
                    type: browser_mod
                - entity_id: /dnd/
            show_empty: true



# |   END: home.yaml
