
# | START: govee.yaml
# |  PATH: /config/packages/device/govee.yaml


#  ╭────────────────────╮
#  │   REST COMMAND
#  ╰────────────────────╯
rest_command:
 rest_govee_appliance:
   url: https://developer-api.govee.com/v1/appliance/devices/control
   method: PUT
   headers:
       Content-Type: application/json
       Govee-API-Key: !secret govee_api_key
   content_type: 'application/json; charset=utf-8'
   payload: '{"device": "{{ device }}","model": "{{ model }}","cmd": {"name": "{{ cmd_name }}","value": "{{ cmd_value }}"}}'
   verify_ssl: true



#  ╭────────────────────╮
#  │   INPUT SELECT
#  ╰────────────────────╯
input_select:

 govee_heater_mode:
   name: "Govee Heater Mode"
   options:
     - "Off"        # Maps to cmd_value: "off" with cmd_name: "turn"
     - "Fan Only"   # Maps to cmd_value: "4" with cmd_name: "mode"
     - "Low Heat"   # Maps to cmd_value: "1" with cmd_name: "mode"
     - "High Heat"  # Maps to cmd_value: "3" with cmd_name: "mode"
   initial: "Off"
   icon: mdi:radiator



#  ╭────────────────────╮
#  │   AUTOMATION
#  ╰────────────────────╯
automation:

 - alias: "Govee Heater Mode Control"
   id: govee_heater_mode_control
   trigger:
     platform: state
     entity_id: input_select.govee_heater_mode
   action:
     - service: rest_command.rest_govee_appliance
       data:
         device: !secret govee_heater_device_id
         model: !secret govee_heater_model
         # Determines whether to use "turn" or "mode" command based on selection
         cmd_name: >-
           {% if trigger.to_state.state == 'Off' %}
             turn
           {% else %}
             mode
           {% endif %}
         # Maps the friendly names to their API values
         cmd_value: >-
           {% set modes = {
             'Fan Only': '4',
             'Low Heat': '1',
             'High Heat': '3',
             'Off': 'off'
           } %}
           {{ modes[trigger.to_state.state] }}


# |   END: govee.yaml
