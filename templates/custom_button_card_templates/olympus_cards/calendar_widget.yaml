
# | START: calendar_widget.yaml
# |  PATH: /config/templates/custom_button_card_templates/olympus_cards/calendar_widget.yaml


# ➔ Calendar Widget
#   Custom button card template that cycles through calendar events using CSS animations
#   and JavaScript DOM manipulation. Core functionality:
#
#     • Event cycling with configurable transition timing
#     • Per-calendar gradient color definitions
#     • Date/time toggle with 5s interval
#     • Relative date formatting (today/tomorrow/etc)
#     • Multi-calendar event handling
#     • Navigation to calendar view on tap


# ➔ Example Usage
# type: custom:button-card
# template: calendar_widget
# variables:
#   calendars:
#     - calendar.both
#     - calendar.cam
#     - calendar.special_day
#     - calendar.enhy
#     - calendar.united_kingdom_eng
#     - calendar.colombia
#     - calendar.spain_cb
#   calendar_colors:
#     calendar.cam:
#       type: gradient
#       start: rgba(16, 204, 255, 1)
#       end: rgba(2, 107, 255, 1)
#     calendar.enhy:
#       type: gradient
#       start: rgba(255, 141, 196, 1)
#       end: rgba(201, 65, 193, 1)
#     calendar.both:
#       type: gradient
#       start: rgba(2, 107, 255, 1)
#       end: rgba(201, 65, 193, 1)
#     calendar.colombia:
#       type: gradient
#       start: rgba(255, 218, 120, 1)
#       mid: rgba(2, 107, 255, 1)
#       end: rgba(192, 11, 29, 1)
#     calendar.spain_cb:
#       type: gradient
#       start: rgba(255, 218, 120, 1)
#       end: rgba(192, 11, 29, 1)


calendar_widget:

# ╭────────────────────╮
# │ VARIABLES
# ╰────────────────────╯
  variables:

#   List of calendars to display events from
    calendars:
      - calendar.both
      - calendar.cam
      - calendar.special_day
      - calendar.enhy
      - calendar.united_kingdom_eng
      - calendar.colombia
      - calendar.spain_cb
#   Custom gradient colors for each calendar
    calendar_colors:
      calendar.cam:
        type: gradient
        start: rgba(16, 204, 255, 1)
        end: rgba(2, 107, 255, 1)
      calendar.enhy:
        type: gradient
        start: rgba(255, 141, 196, 1)
        end: rgba(201, 65, 193, 1)
      calendar.both:
        type: gradient
        start: rgba(2, 107, 255, 1)
        end: rgba(201, 65, 193, 1)
      calendar.colombia:
        type: gradient
        start: rgba(255, 218, 120, 1)
        mid: rgba(2, 107, 255, 1)
        end: rgba(192, 11, 29, 1)
      calendar.spain_cb:
        type: gradient
        start: rgba(255, 218, 120, 1)
        end: rgba(192, 11, 29, 1)
#   Animation timing configuration (in ms/s)
    display_time: 1000                                # How long to display each event
    char_delay: 0.06                                  # Delay between each character animation
    fade_duration: 2                                  # Duration of fade transitions
    fade_in_delay: -0.4                               # Negative delay creates overlap in animations
    label_animation_offset: 0.12
    days_to_show: 28                                  # Number of days to look ahead for events


# ╭────────────────────╮
# │ ENTITY
# ╰────────────────────╯
  entity: calendar.cam


# ╭────────────────────╮
# │ STATE
# ╰────────────────────╯
  state:
    - operator: template
      value: |
        [[[ return true; ]]]

  triggers_update: all


# ╭────────────────────╮
# │ TAP ACTION
# ╰────────────────────╯
  tap_action:
    action: navigate
    navigation_path: /calendar
    haptic: success


# ╭────────────────────╮
# │ STYLES
# ╰────────────────────╯
  styles:

#   Main card container styling
    card:
      - animation: slide 2s 0.8s both                 # Initial slide-in animation
      - padding: 8px 8px 8px 88px                     # Extra left padding for date widget
      - position: relative
      - background: none                              # Transparent background
      - box-shadow: none
      - border: none
      - "--mdc-ripple-color": rgba(0,0,0,0)        # Disable ripple effect
      - "--mdc-ripple-fg-opacity": 0
      - width: 100%
      - min-height: 100px
      - transform-style: preserve-3d                # Enable 3D transforms
      - perspective: 1000px                         # Add depth to 3D transforms

#   Event title styling
    name:
      - font-size: 1rem
      - font-weight: 400
      - letter-spacing: 0.5px
      - text-align: left
      - padding-left: 71px               # Align with card padding
      - overflow: hidden
      - min-width: 350px
      - transform-style: preserve-3d
      - transform: translateZ(30px)       # Push forward in 3D space
      - transition: transform 0.3s ease-out

#   Date/time label styling
    label:
      - font-size: 0.75rem
      - color: var(--secondary-text-color, rgba(17, 19, 2, 1))
      - font-weight: normal
      - letter-spacing: 0.5px
      - word-spacing: 0px
      - text-align: left
      - padding-left: 71px
      - margin-top: "-3px"
      - overflow: hidden
      - min-width: 350px
      - transform-style: preserve-3d
      - transform: translateZ(20px)       # Slightly behind name in 3D space
      - transition: transform 0.3s ease-out

#   Custom elements styling
    custom_fields:
#   Date widget container
      date:
        - background: var(--ha-card-background, rgba(17, 19, 2, 1))
        - border-radius: 20px
        - padding: 12px
        - display: flex
        - flex-direction: column
        - align-items: start
        - justify-content: center
        - width: 79px
        - height: 59%
        - position: absolute
        - left: 10px
        - top: 50%
        - transform: translateY(-50%) translateZ(60px)  # Highest in 3D space
        - box-shadow: none
        - border: none
        - transition: all 0.3s ease-out
        - transform-style: preserve-3d
        - z-index: 1
        - overflow: hidden

#   Calendar color indicator bar
      bar:
        - position: absolute
        - left: 138px
        - top: 20%
        - width: 8px
        - height: 60%


# ╭────────────────────╮
# │ EXTRA STYLES
# ╰────────────────────╯
  extra_styles: |
    @keyframes textfadeoutro {
      0% {
        transform: translateX(0) scaleX(1);
        filter: blur(0);
        opacity: 1;
      }
      100% {
        transform: translateX(25px) scaleX(0.9);
        filter: blur(4px);
        opacity: 0;
      }
    }

    @keyframes textfadeintro {
      0% {
        transform: translateX(-25px) scaleX(0.9);
        filter: blur(4px);
        opacity: 0;
      }
      100% {
        transform: translateX(0) scaleX(1);
        filter: blur(0);
        opacity: 1;
      }
    }

    @keyframes barFadeIn {
      0%   { opacity: 0; }
      100% { opacity: 1; }
    }

    @keyframes slide {
      0% {transform: translateX(3%); opacity: 0;}
    }


# ╭────────────────────╮
# │ CUSTOM FIELDS
# ╰────────────────────╯
  custom_fields:

    date: |
      [[[
        // Set up two interval timers for the date/time display:
        // 1. Update digital clock every second
        // 2. Toggle between date and time every 5 seconds
        // We use a global flag to ensure intervals are only set once

        if (!window._dateTimeIntervalsSet) {
          setTimeout(() => {
            // Get references to the date and time containers
            const dateEl = this.shadowRoot?.querySelector('#dateEl');
            const timeEl = this.shadowRoot?.querySelector('#timeEl');

            if (!dateEl || !timeEl) return;

            // Update digital clock every second
            setInterval(() => {
              const now = new Date();
              const hours   = now.getHours();
              const minutes = now.getMinutes().toString().padStart(2, '0');
              const seconds = now.getSeconds().toString().padStart(2, '0');
              const hour12  = hours % 12 || 12;  // Convert 24h to 12h format

              // Render time with colored separators
              timeEl.innerHTML = `
                <span style="color: var(--primary-text-color, rgba(119, 122, 131, 1))">${hour12}</span><span style="color: var(--accent-color, rgba(68, 248, 202, 1))">:</span><span style="color: var(--primary-text-color, rgba(119, 122, 131, 1))">${minutes}</span><span style="color: var(--accent-color, rgba(68, 248, 202, 1))">.</span><span style="font-size: 0.8rem; color: var(--secondary-text-color, rgba(17, 19, 2, 1))">${seconds}</span>
              `;
            }, 1000);

            // Toggle between date and time display every 5 seconds
            let showTime = false; 
            setInterval(() => {
              showTime = !showTime;
              if (showTime) {
                // Fade in time, fade out date
                timeEl.style.opacity   = '1';
                timeEl.style.transform = 'translateY(0)';
                dateEl.style.opacity   = '0';
                dateEl.style.transform = 'translateY(3px)';
              } else {
                // Fade in date, fade out time
                dateEl.style.opacity   = '1';
                dateEl.style.transform = 'translateY(0)';
                timeEl.style.opacity   = '0';
                timeEl.style.transform = 'translateY(3px)';
              }
            }, 5000);
          }, 0);

          window._dateTimeIntervalsSet = true;  // Prevent multiple interval creation
        }

        // Format and render the current date
        const now    = new Date();
        const month  = now.toLocaleString('default', { month: 'short' });
        const day    = now.getDate();
        const days   = ['Sun','Mon','Tue','Wed','Thur','Fri','Sat'];
        
        // Helper to get ordinal suffix (1st, 2nd, 3rd, etc)
        const getOrdinal = (n) => {
          const s = ['th','st','nd','rd'];
          const v = n % 100;
          return s[(v - 20) % 10] || s[v] || s[0];
        };

        // Build date display with ordinal suffix
        const dateMarkup = `
          ${month} <span style="color: var(--accent-color, rgba(68, 248, 202, 1))">${day}<sup style="font-size: 0.5em; color: var(--primary-text-color, rgba(119, 122, 131, 1))">${getOrdinal(day)}</sup></span>
        `;
        const weekday = days[now.getDay()];

        // Return the complete date widget markup
        return `
          <div style="position: relative; height: 100%; display: flex; flex-direction: column; justify-content: space-between;">
            <div style="position: relative; flex-grow: 1;">
              <!-- Date display (starts visible) -->
              <div id="dateEl"
                  style="
                    position: absolute; top: 0; left: 0;
                    letter-spacing: 1px; 
                    font-size: 1.3em; 
                    font-weight: normal; 
                    text-align: right; 
                    transition: opacity ${variables.fade_duration}s ease-in-out, transform ${variables.fade_duration}s ease-in-out;
                    opacity: 1; 
                    transform: translateY(0);
                  ">
                ${dateMarkup}
              </div>
              <!-- Time display (starts hidden) -->
              <div id="timeEl"
                  style="
                    position: absolute; top: 0; left: 0;
                    letter-spacing: 1px;
                    font-size: 1.2em; 
                    font-weight: normal; 
                    text-align: right; 
                    transition: opacity ${variables.fade_duration}s ease-in-out, transform ${variables.fade_duration}s ease-in-out;
                    opacity: 0;
                    transform: translateY(10px);
                  ">
                <!-- Updated by JS every second -->
              </div>
            </div>
            <!-- Weekday display -->
            <div style="letter-spacing: 2px; text-align: right; color: var(--secondary-text-color, rgba(17, 19, 2, 1)); font-size: 0.8em; text-align: left;">
              ${weekday}
            </div>
          </div>
        `;
      ]]]


    bar: |
      [[[ 
        // Check if a calendar has events within our display timeframe
        const isWithinTimeframe = (calendar) => {
          if (!states[calendar]?.attributes?.start_time) return false;
          const startTime = new Date(states[calendar].attributes.start_time);
          const futureDate = new Date();
          futureDate.setDate(futureDate.getDate() + (variables.days_to_show || 28));
          return startTime <= futureDate;
        };

        // Calculate animation duration based on message length
        const getAnimationTime = (message) => {
          return (message.length * variables.char_delay + variables.fade_duration) * 1000;
        };

        // Get calendar color or gradient definition
        const getColor = (calendar) => {
          const color = variables.calendar_colors[calendar];
          if (!color) return 'var(--accent-color, rgba(68, 248, 202, 1))';
          if (typeof color === 'string') return color;
          if (color.type === 'gradient') {
            if (color.mid) {
              // Three-color gradient with smooth transitions
              return `linear-gradient(to bottom, 
                ${color.start} 0%, 
                ${color.start} 15%, 
                ${color.mid} 50%,                              
                ${color.end} 85%, 
                ${color.end} 100%)`;
            }
            // Simple two-color gradient
            return `linear-gradient(to bottom, ${color.start}, ${color.end})`;
          }
          return color;
        };

        // Get current timestamp for animation calculations
        const now = Date.now();
        
        // Filter calendars to only those with upcoming events
        const activeCalendars = variables.calendars.filter(cal => isWithinTimeframe(cal));
        if (activeCalendars.length === 0) {
          activeCalendars.push(variables.calendars[0]);  // Fallback to first calendar if none active
        }
        
        // Calculate maximum animation time needed for all calendar messages
        const maxAnimTime = Math.max(...activeCalendars.map(cal => {
          const msg = isWithinTimeframe(cal) 
            ? (states[cal].attributes.message || 'No upcoming events')
            : `No upcoming events in the next ${variables.days_to_show || 28} days`;
          return getAnimationTime(msg);
        }));
        
        // Calculate timing for event cycling
        const cycleTime = variables.display_time + (maxAnimTime * 2) + (variables.fade_in_delay * 1000);
        const cycleIndex = Math.floor(now / cycleTime) % activeCalendars.length;
        const current = activeCalendars[cycleIndex];
        const next = activeCalendars[(cycleIndex + 1) % activeCalendars.length];
        const shouldAnimate = (now % cycleTime) > variables.display_time;
        
        // Get colors for current and next calendar
        const currentColor = getColor(current);
        const nextColor = getColor(next);
        
        // Return static bar if not animating
        if (!shouldAnimate) {
          return `<div style="position:absolute;left:0;top:0;width:4px;height:100%;
                            background:${currentColor};border-radius:2px;"></div>`;
        }
        
        // Return animated transition between calendar colors
        return `
          <div style="position:absolute;left:0;top:0;width:4px;height:100%;">
            <div style="position:absolute;left:0;top:0;width:100%;height:100%;
                        background:${currentColor};border-radius:2px;
                        opacity:1;transition:opacity ${variables.fade_duration}s ease-in-out;"></div>
            <div style="position:absolute;left:0;top:0;width:100%;height:100%;
                        background:${nextColor};border-radius:2px;opacity:0;
                        transition:opacity ${variables.fade_duration}s ease-in-out;
                        animation:barFadeIn ${variables.fade_duration}s ease-in-out forwards;
                        animation-delay:${variables.fade_in_delay}s;"></div>
          </div>
        `;
      ]]]


  name: |
    [[[ 
      // Helper function to check if event is within display timeframe
      const isWithinTimeframe = (calendar) => {
        if (!states[calendar]?.attributes?.start_time) return false;
        const startTime = new Date(states[calendar].attributes.start_time);
        const futureDate = new Date();
        futureDate.setDate(futureDate.getDate() + (variables.days_to_show || 28));
        return startTime <= futureDate;
      };

      // Calculate animation duration for text transitions
      const getAnimationTime = (message) => {
        return (message.length * variables.char_delay + variables.fade_duration) * 1000;
      };

      // Get active calendars and calculate animation timings
      const now = Date.now();
      const activeCalendars = variables.calendars.filter(cal => isWithinTimeframe(cal)) || [variables.calendars[0]];
      const maxAnimTime = Math.max(...activeCalendars.map(cal => {
        const msg = isWithinTimeframe(cal) 
          ? (states[cal].attributes.message || 'No upcoming events')
          : `No upcoming events in the next ${variables.days_to_show || 28} days`;
        return getAnimationTime(msg);
      }));
      
      // Calculate timing for event cycling
      const cycleTime = variables.display_time + (maxAnimTime * 2) + (variables.fade_in_delay * 1000);
      const cycleIndex = Math.floor(now / cycleTime) % activeCalendars.length;
      const current = activeCalendars[cycleIndex];
      const next = activeCalendars[(cycleIndex + 1) % activeCalendars.length];
      const shouldAnimate = (now % cycleTime) > variables.display_time;

      // Get event messages for current and next calendar
      const currentMessage = isWithinTimeframe(current) 
        ? (states[current].attributes.message || 'No upcoming events')
        : `No upcoming events in the next ${variables.days_to_show || 28} days`;
      const nextMessage = isWithinTimeframe(next)
        ? (states[next].attributes.message || 'No upcoming events')
        : `No upcoming events in the next ${variables.days_to_show || 28} days`;

      // Create animated text with character-by-character fade
      const createAnimatedText = (text, isNext = false) => {
        return text.split('').map((char, i) => {
          const delay = (isNext ? variables.fade_in_delay : 0) + (i * variables.char_delay);
          const animation = isNext ? 'textfadeintro' : 'textfadeoutro';
          const initialOpacity = isNext ? '0' : '1';
          return `<span style="display:inline-block;opacity:${initialOpacity};
                        animation:${animation} ${variables.fade_duration}s cubic-bezier(0.4,0,0.2,1) forwards;
                        animation-delay:${delay}s;position:relative;">
                  ${char === ' ' ? '&nbsp;' : char}
                </span>`;
        }).join('');
      };
      
      // Return static text if not animating
      if (!shouldAnimate) {
        return `<div class="calendar-text" style="position:relative;min-height:1.5em;">
                  <div style="position:absolute;top:0;left:0;width:100%;">${currentMessage}</div>
                </div>`;
      }
      
      // Return animated transition between event messages
      return `
        <div class="calendar-text" style="position:relative;min-height:1.5em;">
          <div class="text-layer" style="position:absolute;top:0;left:0;width:100%;z-index:1;">
            ${createAnimatedText(currentMessage)}
          </div>
          <div class="text-layer" style="position:absolute;top:0;left:0;width:100%;z-index:2;">
            ${createAnimatedText(nextMessage, true)}
          </div>
        </div>
      `;
    ]]]


# ╭────────────────────╮
# │ LABEL
# ╰────────────────────╯
  label: |
    [[[ 
      // Helper to split text while preserving HTML tags
      const splitWithHtml = (str) => {
        const result = [];
        let currentTag = '';
        let inTag = false;
        
        for (let i = 0; i < str.length; i++) {
          const char = str[i];
          if (char === '<') {
            inTag = true;
            currentTag = char;
            continue;
          }
          if (inTag) {
            currentTag += char;
            if (char === '>') {
              result.push(currentTag);
              currentTag = '';
              inTag = false;
            }
            continue;
          }
          result.push(char);
        }
        return result;
      };

      // Check if event is within display timeframe
      const isWithinTimeframe = (calendar) => {
        if (!states[calendar]?.attributes?.start_time) return false;
        const startTime = new Date(states[calendar].attributes.start_time);
        const futureDate = new Date();
        futureDate.setDate(futureDate.getDate() + (variables.days_to_show || 28));
        return startTime <= futureDate;
      };

      // Calculate animation duration for text transitions
      const getAnimationTime = (message) => {
        return (message.length * variables.char_delay + variables.fade_duration) * 1000;
      };

      // Get active calendars and calculate animation timings
      const now = Date.now();
      const activeCalendars = variables.calendars.filter(cal => isWithinTimeframe(cal));
      if (activeCalendars.length === 0) {
        activeCalendars.push(variables.calendars[0]);
      }
      
      const maxAnimTime = Math.max(...activeCalendars.map(cal => {
        const msg = isWithinTimeframe(cal) 
          ? (states[cal].attributes.message || 'No upcoming events')
          : `No upcoming events in the next ${variables.days_to_show || 28} days`;
        return getAnimationTime(msg);
      }));
      
      const cycleTime = variables.display_time + (maxAnimTime * 2) + (variables.fade_in_delay * 1000);
      const cycleIndex = Math.floor(now / cycleTime) % activeCalendars.length;
      const current = activeCalendars[cycleIndex];
      const next = activeCalendars[(cycleIndex + 1) % activeCalendars.length];
      const shouldAnimate = (now % cycleTime) > variables.display_time;

      // Format event date/time with smart relative formatting
      const formatDate = (calendar) => {
        if (!states[calendar]?.attributes?.start_time) return 'No date available';
        
        // Get event timing details
        const startTime = new Date(states[calendar].attributes.start_time);
        const endTime   = new Date(states[calendar].attributes.end_time || startTime);
        const midnight  = new Date().setHours(0,0,0,0);
        const startDays = Math.floor((startTime - midnight) / 86400000);
        const endDays   = Math.floor((endTime - midnight) / 86400000);
        const isAllDay  = states[calendar].attributes.all_day;
        const duration  = (isAllDay ? endDays - 1 : endDays) - startDays + 1;
        
        // Format time string for non-all-day events
        const timeStr   = !isAllDay
          ? startTime
            .toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true })
            .replace(':00','')
            .toLowerCase()
            .replace(' ','')
          : '';
        
        // Helper to get ordinal suffix (1st, 2nd, etc)
        const getOrdinal = (n) => {
          const s = ['th','st','nd','rd'];
          const v = n % 100;
          return s[(v - 20) % 10] || s[v] || s[0];
        };
        
        // Format date with smart relative labels
        const formatDay = (date, withWeekday = false) => {
          const days = Math.floor((date - midnight) / 86400000);
          if (days === 0) return 'today';
          if (days === 1) return 'Tomorrow';
          if (days < 8 && withWeekday) {
            return date.toLocaleDateString('en-GB', { weekday: 'long' });
          }
          const dayNum    = date.getDate();
          const ordinalDay= `${dayNum}<sup>${getOrdinal(dayNum)}</sup>`;
          const monthName = date.toLocaleDateString('en-GB', { month: 'long' });
          return `${ordinalDay} ${monthName}`;
        };

        // Handle events outside display timeframe
        if (!isWithinTimeframe(calendar)) {
          return `No upcoming events in the next ${variables.days_to_show || 28} days`;
        }

        // Check if event spans overnight
        const isOvernight = (
          !isAllDay && endTime - startTime < 172800000 && 
          (endTime.getDate() !== startTime.getDate() || 
          endTime.getMonth() !== startTime.getMonth() || 
          endTime.getFullYear() !== startTime.getFullYear())
        ) || 
        (isAllDay && endTime - startTime <= 172800000);

        // Format single-day events
        if (duration === 1) {
          if (isAllDay) {
            if (startDays < 8) {
              return startDays <= 1
                ? ['Today', 'Tomorrow'][startDays]
                : `On ${formatDay(startTime, true)}`;
            }
            return `On ${formatDay(startTime)}`;
          }
          if (startDays < 8) {
            return startDays <= 1
              ? `At ${timeStr} ${['today','tomorrow'][startDays]}`
              : `At ${timeStr} on ${formatDay(startTime, true)}`;
          }
          return `At ${timeStr} on ${formatDay(startTime)}`;
        }
        
        // Format overnight events
        if (isOvernight) {
          if (startDays === 0) return 'Tonight';
          if (startDays === 1) return 'Tomorrow overnight';
          if (startDays < 8) return `${formatDay(startTime, true)} overnight`;
          return `${formatDay(startTime)} overnight`;
        }
        
        // Format multi-day events
        return `${formatDay(startTime, startDays < 8)} to ${formatDay(endTime, endDays < 8)}`;
      };

      // Get formatted dates for current and next events
      const currentLabel = formatDate(current);
      const nextLabel    = formatDate(next);

      // Create animated text with HTML tag preservation
      const createAnimatedText = (text, isNext = false) => {
        return splitWithHtml(text).map((char, i) => {
          if (char.startsWith('<')) return char;  // Preserve HTML tags
          const delay = (isNext ? variables.fade_in_delay : 0) + (i * variables.char_delay);
          const animation = isNext ? 'textfadeintro' : 'textfadeoutro';
          const initialOpacity = isNext ? '0' : '1';
          return `<span style="display:inline-block;opacity:${initialOpacity};
                        animation:${animation} ${variables.fade_duration}s cubic-bezier(0.4,0,0.2,1) forwards;
                        animation-delay:${delay}s;position:relative;">
                  ${char === ' ' ? '&nbsp;' : char}
                </span>`;
        }).join('');
      };
      
      // Return static text if not animating
      if (!shouldAnimate) {
        return `<div style="position:relative;min-height:1.5em;">
                  <div style="position:absolute;top:0;left:0;width:100%;">${currentLabel}</div>
                </div>`;
      }
      
      // Return animated transition between date labels
      return `
        <div style="position:relative;min-height:1.5em;">
          <div style="position:absolute;top:0;left:0;width:100%;z-index:1;">
            ${createAnimatedText(currentLabel)}
          </div>
          <div style="position:absolute;top:0;left:0;width:100%;z-index:2;">
            ${createAnimatedText(nextLabel, true)}
          </div>
        </div>
      `;
    ]]]


# | END: calendar_widget.yaml
